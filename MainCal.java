/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package resultcalculator;




import com.itextpdf.text.*;
import com.itextpdf.text.pdf.GrayColor;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import javax.swing.JFileChooser;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.LayoutManager;
import java.awt.RenderingHints;
import java.io.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import javax.swing.*;
import java.sql.*;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Vector;
import net.proteanit.sql.DbUtils;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.TableRowAlign;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTBody;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTDocument1;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTPageSz;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTSectPr;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.STPageOrientation;
/**
 *
 * @author AD0KW3
 */
public class MainCal extends javax.swing.JFrame {
    
    Connection conn;
    PreparedStatement pst;
    ResultSet rs;
	Statement ps=null;

    /**
     * Creates new form MainCal
     */
    public MainCal() {
       super("Result Calculator Version 0.1");
        initComponents();
        conn=db.dbcon();
		sessionNow();
        dialog1.setLocationRelativeTo(null);
		summary();
		lblUser.setText(lecturer);
		lblUserH.setText("Welcome "+lecturer);
              
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        dialog1 = new javax.swing.JFrame();
        dLayer = new javax.swing.JLayeredPane();
        userBar = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        txtUserUser = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        jButton33 = new javax.swing.JButton();
        userDeptCombo = new javax.swing.JComboBox<>();
        txtUserPass = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        userDesCombo = new javax.swing.JComboBox<>();
        jLabel54 = new javax.swing.JLabel();
        jButton35 = new javax.swing.JButton();
        jButton37 = new javax.swing.JButton();
        jLabel55 = new javax.swing.JLabel();
        userDesCombo1 = new javax.swing.JComboBox<>();
        addDeptBar = new javax.swing.JPanel();
        txtNewDept = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        jButton22 = new javax.swing.JButton();
        jLabel53 = new javax.swing.JLabel();
        txtNewDept1 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dialogTable = new javax.swing.JTable();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        buttonGroup1 = new javax.swing.ButtonGroup();
        btngSem = new javax.swing.ButtonGroup();
        layeredPanel = new javax.swing.JLayeredPane();
        homePanel = new javax.swing.JPanel();
        panel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton36 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nStud = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        nF = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        nCourse = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        nA = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        nP = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        nLev = new javax.swing.JLabel();
        lblUserH = new javax.swing.JLabel();
        reportPanel = new javax.swing.JPanel();
        reportLevelCombo = new javax.swing.JComboBox<>();
        jButton19 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jButton25 = new javax.swing.JButton();
        lblReportMsg = new javax.swing.JLabel();
        progress1 = new javax.swing.JProgressBar();
        jScrollPane6 = new javax.swing.JScrollPane();
        reportTable = new javax.swing.JTable();
        panel = new javax.swing.JPanel();
        tablePane = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        panel1 = new javax.swing.JPanel();
        sideBar = new javax.swing.JLayeredPane();
        scoreBar = new javax.swing.JPanel();
        btnsave = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel46 = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel44 = new javax.swing.JLabel();
        scoreCourse = new javax.swing.JComboBox<>();
        txtmat = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        txtca = new javax.swing.JTextField();
        txtexam = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        lblSess = new javax.swing.JLabel();
        lblDept = new javax.swing.JLabel();
        fir = new javax.swing.JRadioButton();
        sec = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        studentPane = new javax.swing.JPanel();
        jButton15 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        addStudentBar = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        txtNewStudentMatric = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        txtNewStudentName = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        addStudentLevelCombo = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        newStudentDeptCombo1 = new javax.swing.JComboBox<>();
        coursePane = new javax.swing.JPanel();
        addCourseBar = new javax.swing.JPanel();
        txtNewCourseTitle = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        comboNewCourseCredit = new javax.swing.JComboBox<>();
        txtNewCourseLecturer = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        txtNewCourseCode1 = new javax.swing.JTextField();
        jLabel49 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        comboNewCourseCredit1 = new javax.swing.JComboBox<>();
        AddCourseSemesterCombo1 = new javax.swing.JComboBox<>();
        comboNewCourseCredit2 = new javax.swing.JComboBox<>();
        jLabel58 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        lblStudentMsg2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        courseAllCheck = new javax.swing.JCheckBox();
        jButton9 = new javax.swing.JButton();
        jButton30 = new javax.swing.JButton();
        lblStudentMsg1 = new javax.swing.JLabel();
        courseSecondCheck1 = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        courseFirstCheck = new javax.swing.JCheckBox();
        courseSecondCheck2 = new javax.swing.JCheckBox();
        courseSecondCheck = new javax.swing.JCheckBox();
        gpBar = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton18 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        importBar = new javax.swing.JPanel();
        jButton23 = new javax.swing.JButton();
        importCombo = new javax.swing.JComboBox<>();
        jButton24 = new javax.swing.JButton();
        importCourseCombo = new javax.swing.JComboBox<>();
        importSessionCombo = new javax.swing.JComboBox<>();
        lblUser = new javax.swing.JLabel();
        scorePanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        scoreTable = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        viewMenu = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        reportMenu = new javax.swing.JMenu();
        jMenu11 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();

        dialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        dialog1.setAlwaysOnTop(true);
        dialog1.setMinimumSize(new java.awt.Dimension(665, 515));
        dialog1.setResizable(false);

        dLayer.setLayout(new java.awt.CardLayout());

        userBar.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)), "Users", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 36), new java.awt.Color(0, 51, 102))); // NOI18N
        userBar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                userBarMouseMoved(evt);
            }
        });

        jLabel18.setText("Username");

        jLabel50.setText("Name (e.g Isa Olu Chukwu)");

        jLabel52.setText("Department");

        jButton33.setText("Add");
        jButton33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton33ActionPerformed(evt);
            }
        });

        userDeptCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                userDeptComboItemStateChanged(evt);
            }
        });

        jLabel21.setText("Password");

        userDesCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Admin", "Staff" }));
        userDesCombo.setSelectedItem(null);

        jLabel54.setText("Designation");

        jButton35.setText("Delete");
        jButton35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton35ActionPerformed(evt);
            }
        });

        jButton37.setText("Edit");
        jButton37.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton37ActionPerformed(evt);
            }
        });

        jLabel55.setText("Level");

        userDesCombo1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));
        userDesCombo1.setSelectedItem(null);

        javax.swing.GroupLayout userBarLayout = new javax.swing.GroupLayout(userBar);
        userBar.setLayout(userBarLayout);
        userBarLayout.setHorizontalGroup(
            userBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userBarLayout.createSequentialGroup()
                        .addGroup(userBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUserUser, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userBarLayout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addGap(78, 78, 78)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addGroup(userBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(txtUserPass, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(userBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(userBarLayout.createSequentialGroup()
                                .addComponent(jLabel50)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtUserName))
                        .addGap(36, 36, 36))
                    .addGroup(userBarLayout.createSequentialGroup()
                        .addGroup(userBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userDeptCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel52))
                        .addGap(18, 18, 18)
                        .addGroup(userBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userDesCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel54))
                        .addGap(33, 33, 33)
                        .addGroup(userBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userDesCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel55))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(userBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton33, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton35, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton37, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        userBarLayout.setVerticalGroup(
            userBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(userBarLayout.createSequentialGroup()
                            .addComponent(jLabel52)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(userDeptCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, userBarLayout.createSequentialGroup()
                            .addComponent(jLabel54)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(userDesCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(userBarLayout.createSequentialGroup()
                        .addComponent(jLabel55)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userDesCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(userBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(userBarLayout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addGap(34, 34, 34))
                    .addGroup(userBarLayout.createSequentialGroup()
                        .addGroup(userBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(userBarLayout.createSequentialGroup()
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1))
                            .addGroup(userBarLayout.createSequentialGroup()
                                .addComponent(jLabel50)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(userBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtUserName)
                            .addComponent(txtUserPass, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtUserUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(userBarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton37, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton35, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton33, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        dLayer.add(userBar, "card6");

        addDeptBar.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)), "Add Department", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 36), new java.awt.Color(0, 51, 102))); // NOI18N
        addDeptBar.setMinimumSize(new java.awt.Dimension(627, 161));
        addDeptBar.setPreferredSize(new java.awt.Dimension(627, 161));
        addDeptBar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                addDeptBarMouseMoved(evt);
            }
        });
        addDeptBar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        addDeptBar.add(txtNewDept, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 100, 180, 40));

        jLabel51.setText("Departments Name");
        addDeptBar.add(jLabel51, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 60, -1, 30));

        jButton22.setText("Add");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });
        addDeptBar.add(jButton22, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 110, 120, 31));

        jLabel53.setText("School (e.g: Arts)");
        addDeptBar.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, -1, 30));
        addDeptBar.add(txtNewDept1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 180, 40));

        dLayer.add(addDeptBar, "card5");

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 102)));

        dialogTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(dialogTable);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        dialog1.setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout dialog1Layout = new javax.swing.GroupLayout(dialog1.getContentPane());
        dialog1.getContentPane().setLayout(dialog1Layout);
        dialog1Layout.setHorizontalGroup(
            dialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(dialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(dialog1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(dLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 28, Short.MAX_VALUE))
        );
        dialog1Layout.setVerticalGroup(
            dialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog1Layout.createSequentialGroup()
                .addComponent(dLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        layeredPanel.setLayout(new java.awt.CardLayout());

        homePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "HOME", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 36), new java.awt.Color(0, 51, 102))); // NOI18N
        homePanel.setForeground(new java.awt.Color(204, 204, 204));

        panel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)));

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(204, 204, 204));
        jButton1.setText("Home");
        jButton1.setMaximumSize(new java.awt.Dimension(59, 23));
        jButton1.setMinimumSize(new java.awt.Dimension(59, 23));
        jButton1.setPreferredSize(new java.awt.Dimension(59, 23));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(204, 204, 204));
        jButton3.setText("Score Entery");
        jButton3.setMaximumSize(new java.awt.Dimension(59, 23));
        jButton3.setMinimumSize(new java.awt.Dimension(59, 23));
        jButton3.setPreferredSize(new java.awt.Dimension(59, 23));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(0, 0, 0));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(204, 204, 204));
        jButton5.setText("File Import");
        jButton5.setMaximumSize(new java.awt.Dimension(59, 23));
        jButton5.setMinimumSize(new java.awt.Dimension(59, 23));
        jButton5.setPreferredSize(new java.awt.Dimension(59, 23));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton11.setBackground(new java.awt.Color(0, 0, 0));
        jButton11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton11.setForeground(new java.awt.Color(204, 204, 204));
        jButton11.setText("Report");
        jButton11.setMaximumSize(new java.awt.Dimension(59, 23));
        jButton11.setMinimumSize(new java.awt.Dimension(59, 23));
        jButton11.setPreferredSize(new java.awt.Dimension(59, 23));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setBackground(new java.awt.Color(0, 0, 0));
        jButton12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton12.setForeground(new java.awt.Color(204, 204, 204));
        jButton12.setText("Exit");
        jButton12.setMaximumSize(new java.awt.Dimension(59, 23));
        jButton12.setMinimumSize(new java.awt.Dimension(59, 23));
        jButton12.setPreferredSize(new java.awt.Dimension(59, 23));
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton36.setBackground(new java.awt.Color(0, 0, 0));
        jButton36.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton36.setForeground(new java.awt.Color(204, 204, 204));
        jButton36.setText("View Scores");
        jButton36.setMaximumSize(new java.awt.Dimension(59, 23));
        jButton36.setMinimumSize(new java.awt.Dimension(59, 23));
        jButton36.setPreferredSize(new java.awt.Dimension(59, 23));
        jButton36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton36ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton36, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(65, 65, 65))
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton36, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(8, 84, 81));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 204, 255), null, null));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setText("STUDENTS");

        nStud.setBackground(new java.awt.Color(204, 204, 0));
        nStud.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(nStud, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)))
                .addGap(68, 68, 68))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(nStud, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(22, 22, 22))
        );

        jPanel7.setBackground(new java.awt.Color(204, 204, 0));
        jPanel7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 204, 255), null, null));

        nF.setBackground(new java.awt.Color(153, 0, 0));
        nF.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        jLabel7.setBackground(new java.awt.Color(153, 0, 0));
        jLabel7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel7.setText("FAIL");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(nF, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(nF, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel8.setBackground(new java.awt.Color(68, 136, 204));
        jPanel8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 204, 255), null, null));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setText("COURSES");

        nCourse.setBackground(new java.awt.Color(0, 204, 0));
        nCourse.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(nCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)))
                .addGap(68, 68, 68))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(nCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(22, 22, 22))
        );

        jPanel9.setBackground(new java.awt.Color(204, 0, 51));
        jPanel9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 204, 255), null, null));

        nA.setBackground(new java.awt.Color(51, 153, 0));
        nA.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        jLabel8.setBackground(new java.awt.Color(204, 255, 51));
        jLabel8.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel8.setText("ABSENT");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(nA, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(nA, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel10.setBackground(new java.awt.Color(0, 204, 0));
        jPanel10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 204, 255), null, null));

        jLabel5.setBackground(new java.awt.Color(0, 0, 102));
        jLabel5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel5.setText("PASSES");

        nP.setBackground(new java.awt.Color(0, 0, 255));
        nP.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nP, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(nP, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(18, 18, 18))
        );

        jPanel11.setBackground(new java.awt.Color(0, 153, 153));
        jPanel11.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 204, 255), null, null));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setText("LEVEL");

        nLev.setBackground(new java.awt.Color(153, 255, 0));
        nLev.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(nLev, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nLev, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGap(612, 612, 612)
                        .addComponent(lblUserH, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(49, 49, 49)
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homePanelLayout.createSequentialGroup()
                                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(6, 6, 6)))
                        .addGap(60, 60, 60)
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addComponent(lblUserH, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(homePanelLayout.createSequentialGroup()
                                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homePanelLayout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69)
                                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layeredPanel.add(homePanel, "card2");

        reportPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "REPORT", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 36), new java.awt.Color(0, 51, 102))); // NOI18N

        reportLevelCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));

        jButton19.setText("View Result");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jButton21.setText("Generate Report");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        jButton25.setText("Print Result");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        lblReportMsg.setBackground(new java.awt.Color(204, 153, 0));
        lblReportMsg.setFont(new java.awt.Font("Dialog", 2, 10)); // NOI18N
        lblReportMsg.setForeground(new java.awt.Color(153, 102, 0));

        jScrollPane6.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        reportTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        reportTable.setAutoscrolls(false);
        reportTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        reportTable.setRowHeight(25);
        reportTable.setRowMargin(10);
        jScrollPane6.setViewportView(reportTable);

        javax.swing.GroupLayout reportPanelLayout = new javax.swing.GroupLayout(reportPanel);
        reportPanel.setLayout(reportPanelLayout);
        reportPanelLayout.setHorizontalGroup(
            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reportPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblReportMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
            .addGroup(reportPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(reportLevelCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jButton25, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(progress1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(87, Short.MAX_VALUE))
            .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(reportPanelLayout.createSequentialGroup()
                    .addGap(26, 26, 26)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 1062, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        reportPanelLayout.setVerticalGroup(
            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reportPanelLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(lblReportMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reportPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(progress1, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(reportLevelCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton19)
                        .addComponent(jButton21)
                        .addComponent(jButton25)))
                .addGap(431, 431, 431))
            .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(reportPanelLayout.createSequentialGroup()
                    .addGap(123, 123, 123)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(20, Short.MAX_VALUE)))
        );

        layeredPanel.add(reportPanel, "card3");

        panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)));

        tablePane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        resultTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        resultTable.setAutoscrolls(false);
        resultTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        resultTable.setRowHeight(25);
        resultTable.setRowMargin(10);
        jScrollPane4.setViewportView(resultTable);

        tablePane.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 22, 730, 500));

        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sideBar.setLayout(new java.awt.CardLayout());

        scoreBar.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)), "Score Entry", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 36), new java.awt.Color(0, 51, 102))); // NOI18N

        btnsave.setText("Save");
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });

        jLabel46.setText("Matric(e.g 1234)");

        lblName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButton16.setText("Print");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("Export");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jLabel44.setText("Course");

        scoreCourse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scoreCourseMouseClicked(evt);
            }
        });

        txtmat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtmatKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtmatKeyTyped(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "optional", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        txtca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtcaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtcaKeyTyped(evt);
            }
        });

        txtexam.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtexamKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtexamKeyTyped(evt);
            }
        });

        jLabel47.setText("C.A Score");

        jLabel45.setText("Exam score");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel47, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtca, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtexam, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(jLabel45))
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtca, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtexam, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        txtTotal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTotalKeyTyped(evt);
            }
        });

        jLabel59.setText("Total(Score)");

        btngSem.add(fir);
        fir.setText("First");
        fir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                firMouseClicked(evt);
            }
        });

        btngSem.add(sec);
        sec.setText("Second");
        sec.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                secMouseClicked(evt);
            }
        });

        jLabel1.setText("Semester");

        javax.swing.GroupLayout scoreBarLayout = new javax.swing.GroupLayout(scoreBar);
        scoreBar.setLayout(scoreBarLayout);
        scoreBarLayout.setHorizontalGroup(
            scoreBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scoreBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scoreBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scoreBarLayout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(scoreBarLayout.createSequentialGroup()
                        .addGroup(scoreBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDept, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scoreBarLayout.createSequentialGroup()
                                .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(jButton16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(btnsave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scoreBarLayout.createSequentialGroup()
                                .addComponent(jLabel59, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTotal))
                            .addComponent(jSeparator2)
                            .addComponent(lblSess, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(scoreBarLayout.createSequentialGroup()
                                .addGroup(scoreBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel46)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(scoreBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(scoreCourse, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtmat)
                                    .addGroup(scoreBarLayout.createSequentialGroup()
                                        .addComponent(fir)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(sec)
                                        .addGap(0, 18, Short.MAX_VALUE)))))
                        .addGap(20, 20, 20))))
        );
        scoreBarLayout.setVerticalGroup(
            scoreBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scoreBarLayout.createSequentialGroup()
                .addComponent(lblDept, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSess, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(scoreBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scoreBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fir, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sec, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(scoreBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtmat, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel46))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scoreBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scoreCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(scoreBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel59, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnsave, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scoreBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton16)
                    .addComponent(jButton17))
                .addGap(18, 18, 18))
        );

        sideBar.add(scoreBar, "card2");

        studentPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)), "STUDENTS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 24), new java.awt.Color(0, 51, 102))); // NOI18N

        jButton15.setText("Delete");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton31.setText("Export");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });

        addStudentBar.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)), "Add", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24), new java.awt.Color(0, 51, 102))); // NOI18N
        addStudentBar.setMinimumSize(new java.awt.Dimension(627, 161));
        addStudentBar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                addStudentBarMouseMoved(evt);
            }
        });

        jLabel16.setText("Matric(e.g 1234)");

        jLabel39.setText("Name (e.g Isa Olu Chukwu)");

        jButton6.setText("Add");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        addStudentLevelCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));
        addStudentLevelCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                addStudentLevelComboItemStateChanged(evt);
            }
        });

        jLabel19.setText("Level");

        jLabel48.setText("Mode of Entry");

        newStudentDeptCombo1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "UTME", "DE" }));

        javax.swing.GroupLayout addStudentBarLayout = new javax.swing.GroupLayout(addStudentBar);
        addStudentBar.setLayout(addStudentBarLayout);
        addStudentBarLayout.setHorizontalGroup(
            addStudentBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addStudentBarLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(addStudentBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addStudentBarLayout.createSequentialGroup()
                        .addGroup(addStudentBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(addStudentBarLayout.createSequentialGroup()
                        .addGroup(addStudentBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(addStudentBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtNewStudentMatric, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addStudentBarLayout.createSequentialGroup()
                                    .addGroup(addStudentBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(newStudentDeptCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(addStudentBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(addStudentLevelCombo, 0, 77, Short.MAX_VALUE)))
                                .addComponent(txtNewStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        addStudentBarLayout.setVerticalGroup(
            addStudentBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addStudentBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addStudentBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addGroup(addStudentBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newStudentDeptCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addStudentLevelCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jLabel16)
                .addGap(4, 4, 4)
                .addComponent(txtNewStudentMatric, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel39)
                .addGap(4, 4, 4)
                .addComponent(txtNewStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout studentPaneLayout = new javax.swing.GroupLayout(studentPane);
        studentPane.setLayout(studentPaneLayout);
        studentPaneLayout.setHorizontalGroup(
            studentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addStudentBar, javax.swing.GroupLayout.PREFERRED_SIZE, 280, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(studentPaneLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(studentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton31, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        studentPaneLayout.setVerticalGroup(
            studentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentPaneLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jButton15)
                .addGap(18, 18, 18)
                .addComponent(jButton31)
                .addGap(75, 75, 75)
                .addComponent(addStudentBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        sideBar.add(studentPane, "card6");

        coursePane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)), "COURSES", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 24), new java.awt.Color(0, 51, 102))); // NOI18N

        addCourseBar.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)), "Add", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18), new java.awt.Color(0, 51, 102))); // NOI18N
        addCourseBar.setMinimumSize(new java.awt.Dimension(627, 161));
        addCourseBar.setPreferredSize(new java.awt.Dimension(627, 161));
        addCourseBar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                addCourseBarMouseMoved(evt);
            }
        });

        jLabel42.setText("Course Lecturer");

        jLabel43.setText("Unit");

        comboNewCourseCredit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "6" }));

        jLabel13.setText("Semester");

        jLabel49.setText("Code(e.g  MTH111)");

        jLabel56.setText("Title");

        jLabel57.setText("Status");

        comboNewCourseCredit1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elective", "Compulsory" }));

        AddCourseSemesterCombo1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "First", "Second" }));

        comboNewCourseCredit2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));

        jLabel58.setText("Level");

        jButton7.setText("Add");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        lblStudentMsg2.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        lblStudentMsg2.setForeground(new java.awt.Color(153, 51, 0));

        javax.swing.GroupLayout addCourseBarLayout = new javax.swing.GroupLayout(addCourseBar);
        addCourseBar.setLayout(addCourseBarLayout);
        addCourseBarLayout.setHorizontalGroup(
            addCourseBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCourseBarLayout.createSequentialGroup()
                .addGroup(addCourseBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addCourseBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(addCourseBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtNewCourseCode1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addCourseBarLayout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(txtNewCourseTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(addCourseBarLayout.createSequentialGroup()
                            .addComponent(jLabel58, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(comboNewCourseCredit2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel57)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(comboNewCourseCredit1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel56, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addCourseBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblStudentMsg2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addCourseBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addCourseBarLayout.createSequentialGroup()
                                .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtNewCourseLecturer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(addCourseBarLayout.createSequentialGroup()
                                .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboNewCourseCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AddCourseSemesterCombo1, 0, 80, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addCourseBarLayout.setVerticalGroup(
            addCourseBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCourseBarLayout.createSequentialGroup()
                .addGroup(addCourseBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel56)
                    .addComponent(txtNewCourseTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addCourseBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNewCourseCode1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addCourseBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel58, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addCourseBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboNewCourseCredit1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel57)
                        .addComponent(comboNewCourseCredit2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addCourseBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddCourseSemesterCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboNewCourseCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel43))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addCourseBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNewCourseLecturer, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStudentMsg2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)), "View", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 18), new java.awt.Color(0, 51, 102))); // NOI18N

        buttonGroup1.add(courseAllCheck);
        courseAllCheck.setText("All");
        courseAllCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseAllCheckActionPerformed(evt);
            }
        });

        jButton9.setText("Delete");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton30.setText("Export");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        lblStudentMsg1.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        lblStudentMsg1.setForeground(new java.awt.Color(153, 51, 0));

        buttonGroup1.add(courseSecondCheck1);
        courseSecondCheck1.setText("3");
        courseSecondCheck1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseSecondCheck1ActionPerformed(evt);
            }
        });

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Select Level to VIew Courses");

        buttonGroup1.add(courseFirstCheck);
        courseFirstCheck.setText("1");
        courseFirstCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseFirstCheckActionPerformed(evt);
            }
        });

        buttonGroup1.add(courseSecondCheck2);
        courseSecondCheck2.setText("4");
        courseSecondCheck2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseSecondCheck2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(courseSecondCheck);
        courseSecondCheck.setText("2");
        courseSecondCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseSecondCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblStudentMsg1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(courseAllCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(courseFirstCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(courseSecondCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(courseSecondCheck1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(courseSecondCheck2)))
                .addGap(29, 29, 29))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseSecondCheck)
                    .addComponent(courseFirstCheck)
                    .addComponent(courseAllCheck)
                    .addComponent(courseSecondCheck1)
                    .addComponent(courseSecondCheck2))
                .addGap(4, 4, 4)
                .addComponent(lblStudentMsg1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(jButton30))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout coursePaneLayout = new javax.swing.GroupLayout(coursePane);
        coursePane.setLayout(coursePaneLayout);
        coursePaneLayout.setHorizontalGroup(
            coursePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(coursePaneLayout.createSequentialGroup()
                .addGroup(coursePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addCourseBar, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 8, Short.MAX_VALUE))
        );
        coursePaneLayout.setVerticalGroup(
            coursePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(coursePaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addCourseBar, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        sideBar.add(coursePane, "card5");

        gpBar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "View", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24), new java.awt.Color(0, 102, 102))); // NOI18N

        jButton18.setText("view GP");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton20.setText("Delete");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        jButton29.setText("Export");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton18, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(jButton29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(105, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jButton29, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton20, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(187, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout gpBarLayout = new javax.swing.GroupLayout(gpBar);
        gpBar.setLayout(gpBarLayout);
        gpBarLayout.setHorizontalGroup(
            gpBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gpBarLayout.createSequentialGroup()
                .addGap(0, 7, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 7, Short.MAX_VALUE))
        );
        gpBarLayout.setVerticalGroup(
            gpBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gpBarLayout.createSequentialGroup()
                .addGap(0, 18, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 18, Short.MAX_VALUE))
        );

        sideBar.add(gpBar, "card4");

        importBar.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)), "File Import", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 36), new java.awt.Color(0, 51, 102))); // NOI18N

        jButton23.setText("import");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        importCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Students", "Scores", "Courses" }));
        importCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                importComboItemStateChanged(evt);
            }
        });

        jButton24.setText("Save");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        importCourseCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        importSessionCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2019/1", "2019/2", "2018/1", "2018/2", "2017/1", "2017/2", "2016/1", "2016/2", "2015/1", "2015/2", "2014/1", "2014/2" }));

        javax.swing.GroupLayout importBarLayout = new javax.swing.GroupLayout(importBar);
        importBar.setLayout(importBarLayout);
        importBarLayout.setHorizontalGroup(
            importBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(importBarLayout.createSequentialGroup()
                .addContainerGap(54, Short.MAX_VALUE)
                .addGroup(importBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, importBarLayout.createSequentialGroup()
                        .addGroup(importBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton23)
                            .addComponent(importSessionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(importBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(importCourseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton24, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, importBarLayout.createSequentialGroup()
                        .addComponent(importCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109))))
        );
        importBarLayout.setVerticalGroup(
            importBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(importBarLayout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(importCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(importBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importSessionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(importCourseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(72, 72, 72)
                .addGroup(importBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton24)
                    .addComponent(jButton23))
                .addContainerGap(205, Short.MAX_VALUE))
        );

        sideBar.add(importBar, "card3");

        panel1.add(sideBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 12, 302, 543));

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(tablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 757, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblUser, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layeredPanel.add(panel, "card2");

        scorePanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                scorePanelMouseMoved(evt);
            }
        });

        jScrollPane5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        scoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scoreTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        scoreTable.setAutoscrolls(false);
        scoreTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        scoreTable.setRowHeight(25);
        scoreTable.setRowMargin(10);
        jScrollPane5.setViewportView(scoreTable);

        javax.swing.GroupLayout scorePanelLayout = new javax.swing.GroupLayout(scorePanel);
        scorePanel.setLayout(scorePanelLayout);
        scorePanelLayout.setHorizontalGroup(
            scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scorePanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 1062, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        scorePanelLayout.setVerticalGroup(
            scorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scorePanelLayout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        layeredPanel.add(scorePanel, "card5");

        jLabel15.setText("FCEP_ICT Result Calculator Version 0.1");

        jLabel14.setText("All Right Reserved ");

        jMenu1.setText("File");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });

        jMenuItem1.setText("Import from Excel");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
        });
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setText("Report");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, reportPanel, org.jdesktop.beansbinding.ELProperty.create("${focusable}"), jMenuItem3, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem2.setText("Exit");
        jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem2MouseClicked(evt);
            }
        });
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu6.setText("Home");
        jMenu6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu6MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu6);

        viewMenu.setText("View");
        viewMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewMenuMouseClicked(evt);
            }
        });
        viewMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMenuActionPerformed(evt);
            }
        });
        jMenuBar1.add(viewMenu);

        jMenu2.setText("Operations");

        jMenuItem4.setText("Enter scores");
        jMenuItem4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem4MouseClicked(evt);
            }
        });
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem6.setText("View Scores");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem5.setText("Users");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenu9.setText("Add");
        jMenu9.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jMenu9MouseMoved(evt);
            }
        });
        jMenu9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu9ActionPerformed(evt);
            }
        });

        jMenuItem7.setText("Add New Student");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem7);

        jMenuItem8.setText("Add New Course");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem8);

        jMenuItem9.setText("Add Department");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem9);

        jMenu2.add(jMenu9);

        jMenuBar1.add(jMenu2);

        reportMenu.setText("Report");
        reportMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportMenuMouseClicked(evt);
            }
        });
        jMenuBar1.add(reportMenu);

        jMenu11.setText("About");
        jMenu11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu11MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu11);

        jMenu7.setText("Setting");

        jMenuItem10.setText("Change Session");
        jMenuItem10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem10MouseClicked(evt);
            }
        });
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem10);

        jMenuItem11.setText("Change Semester");
        jMenuItem11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem11MouseClicked(evt);
            }
        });
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem11);

        jMenuBar1.add(jMenu7);

        jMenu5.setText("Help");
        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(layeredPanel)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel14)))
                .addGap(426, 426, 426))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(layeredPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
   
    
    
 
   
    
    private void jMenu6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu6MouseClicked
resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));       
        layeredPanel.removeAll();
        layeredPanel.add(homePanel);
        layeredPanel.repaint();
        layeredPanel.revalidate();
		summary();
    }//GEN-LAST:event_jMenu6MouseClicked
  
    


  
    private void viewMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewMenuMouseClicked

		 resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));       
        layeredPanel.removeAll();
        layeredPanel.add(panel);
        layeredPanel.repaint();
        layeredPanel.revalidate();
        
        sideBar.removeAll();
        sideBar.add(gpBar);
        sideBar.repaint();
        sideBar.revalidate();
    }//GEN-LAST:event_viewMenuMouseClicked

    private void jMenuItem2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem2MouseClicked
         System.exit(0);
    }//GEN-LAST:event_jMenuItem2MouseClicked

    private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseClicked
        //new imports().setVisible(true);
    }//GEN-LAST:event_jMenuItem1MouseClicked

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed

		
	if(dept==null){
			ArrayList <String> list=new ArrayList<>();
		JFrame frame = new JFrame("Input Dialog");
	list.clear();
        try{
        String sql="select * from departments  ";
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();
        while(rs.next()){
          
            list.add(rs.getString("department"));
        }
		rs.close();
		pst.close();
	}	catch (SQLException ex) {
			Logger.getLogger(MainCal.class.getName()).log(Level.SEVERE, null, ex);
		}
		
        String[] lists = list.toArray(new String[list.size()]);
		
     String depp = (String) JOptionPane.showInputDialog(
			 frame, "Select Your Department?", "Department",
			 JOptionPane.QUESTION_MESSAGE, null, lists, lists[0]);
                
		if (depp!=null){
			dept=depp;
			String de=dept;
			scoreCourse.removeAllItems();
			lblDept.setText("Department:    "+dept);
	lblSess.setText("Session:       "+session);
	clearTable();
	btngSem.clearSelection();
	semester=null;
		}
		
		
		}
	lblDept.setText("Department: "+dept);
	lblSess.setText("Session: "+session);
	btngSem.clearSelection();
	semester=null;
		resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));       
        layeredPanel.removeAll();
        layeredPanel.add(panel);
        layeredPanel.repaint();
        layeredPanel.revalidate();   
        
        sideBar.removeAll();
        sideBar.add(scoreBar);
        sideBar.repaint();
        sideBar.revalidate();
            
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));       
        layeredPanel.removeAll();
        layeredPanel.add(panel);
        layeredPanel.repaint();
        layeredPanel.revalidate();
        
        
        sideBar.removeAll();
       sideBar.add(importBar);
       sideBar.repaint();
       sideBar.revalidate();
       
       resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));       

       
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void viewMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMenuActionPerformed
           
    }//GEN-LAST:event_viewMenuActionPerformed

    private void reportMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportMenuMouseClicked
		
		

		resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));       
        layeredPanel.removeAll();
        layeredPanel.add(reportPanel);
        layeredPanel.repaint();
        layeredPanel.revalidate();

    }//GEN-LAST:event_reportMenuMouseClicked

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        sideBar.removeAll();
        sideBar.add(importBar);
        sideBar.repaint();
        sideBar.revalidate();
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));       

    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));       
        layeredPanel.removeAll();
        layeredPanel.add(reportPanel);
        layeredPanel.repaint();
        layeredPanel.revalidate();       
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem4MouseClicked
    
    }//GEN-LAST:event_jMenuItem4MouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
       System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
		String newMatric=txtNewStudentMatric.getText().toUpperCase();
		String mod= (String) newStudentDeptCombo1.getSelectedItem();
		//String dept= (String) newStudentDeptCombo.getSelectedItem();
		int mnsa=0;
		try{
		if(mod.equalsIgnoreCase("UTME")){
			mnsa=12;
		}else if(mod.equalsIgnoreCase("DE")){
			mnsa=9;
		}}catch(Exception e){ System.out.println("error calculating mnsa "+ e);}

              try{
		String sql="select * from student where matric=? ";
           pst=conn.prepareStatement(sql);
           pst.setString(1, newMatric );
           rs=pst.executeQuery();
           if(rs.next()){
                try{
                    
            String sqll = "update Student set matric=?, name=?, department=? , level=?"
					+ " WHERE matric='"+newMatric+"' ";
			pst=conn.prepareStatement(sqll);
            pst.setString(1, newMatric);
            pst.setString(2, txtNewStudentName.getText().toUpperCase() );
            pst.setString(3,dept);
            pst.setString(4, (String) addStudentLevelCombo.getSelectedItem());
                pst.execute();            
                }catch(Exception e){System.out.println("error updating "+ e);}
               
                 try{
            String sqll = "update '"+dept+"' set matric='"+newMatric+"', WHERE "
					+ "matric='"+newMatric+"' ";
			pst=conn.prepareStatement(sqll);
            pst.setString(1, mod);
            pst.setInt(2, mnsa );
            
                pst.execute();            
                }catch(Exception e){System.out.println("error update dept student table"+ e);}     
				 try{
					 String s="students";
            String sqll = "update '"+dept+""+s+"' set me=?, mnsa=? WHERE matric='"+newMatric+"' ";
			pst=conn.prepareStatement(sqll);
            pst.setString(1, mod);
            pst.setInt(2, mnsa );
            
                pst.execute();            
                }catch(Exception e){System.out.println("error updating dept summary "+ e);}     
				 
				 try{
            String sqll = "update '"+dept+""+1+"' set me=?, mnsa=? WHERE matric='"+newMatric+"' ";
			pst=conn.prepareStatement(sqll);
            pst.setString(1, mod);
            pst.setInt(2, mnsa );
            
                pst.execute();            
                }catch(Exception e){System.out.println("error updating dept level1 "+ e);}
				
				 try{
            String sqll = "update '"+dept+""+2+"' set me=?, mnsa=? WHERE matric='"+newMatric+"' ";
			pst=conn.prepareStatement(sqll);
            pst.setString(1, mod);
            pst.setInt(2, mnsa );
            
                pst.execute();            
                }catch(Exception e){
                    System.out.println("error updating dept level2 "+ e);
                }
				 try{
                    
            String sqll = "update '"+dept+""+3+"' set me=?, mnsa=? WHERE matric='"+newMatric+"' ";
			pst=conn.prepareStatement(sqll);
            pst.setString(1, mod);
            pst.setInt(2, mnsa );
            
                pst.execute();            
                }catch(Exception e){
                    System.out.println("error updating dept level3 "+ e);
                }
				 try{
                    
            String sqll = "update '"+dept+""+4+"' set me=?, mnsa=? WHERE matric='"+newMatric+"' ";
			pst=conn.prepareStatement(sqll);
            pst.setString(1, mod);
            pst.setInt(2, mnsa );
            
                pst.execute();            
                }catch(Exception e){
                    System.out.println("error updating dept level4 "+ e);
                }
                        }  
        else if(!rs.next()){
             try{
            String sqle ="INSERT INTO Student(matric, name, department,  level) VALUES ( ?,?,?,?) ";
            pst=conn.prepareStatement(sqle);
            pst.setString(1, txtNewStudentMatric.getText().toUpperCase());
            pst.setString(2, txtNewStudentName.getText().toUpperCase() );
            pst.setString(3,dept);
                pst.setString(4, (String) addStudentLevelCombo.getSelectedItem());
            pst.execute();
            //JOptionPane.showMessageDialog(null,"New Student Added successfully!");

        }catch(Exception e){
            System.out.println("error updating dept level1 "+ e);
        }
			 try{
                    
            String sqll = "insert into '"+dept+"' (matric)values (?) ";
			pst=conn.prepareStatement(sqll);
            pst.setString(1, newMatric);
            pst.execute();            
                }catch(Exception e){
                    System.out.println("error serting dept "+ e);
                }
			 try{
                  String s="students";  
            String sqll = "insert into '"+dept+""+s+"' (matric, name, me, mnsa)values (?,?,?,?) ";
			pst=conn.prepareStatement(sqll);
            pst.setString(1, newMatric);
            pst.setString(2, txtNewStudentName.getText().toUpperCase() );
            pst.setString(3,mod);
            pst.setInt(4, mnsa);
            
                pst.execute();            
                }catch(Exception e){
                    System.out.println("error updating dept student "+ e);
                }
			  try{
                  String s="summary";  
            String sqll = "insert into '"+dept+""+s+"' (matric)values (?) ";
			pst=conn.prepareStatement(sqll);
            pst.setString(1, newMatric);
			pst.execute();            
                }catch(Exception e){
                    System.out.println("error updating dept summary "+ e);
                }
			 try{
                    
            String sqll = "insert into '"+dept+""+1+"' (matric, name, me, mnsa)values (?,?,?,?) ";
			pst=conn.prepareStatement(sqll);
            pst.setString(1, newMatric);
            pst.setString(2, txtNewStudentName.getText().toUpperCase() );
            pst.setString(3,mod);
            pst.setInt(4, mnsa);
            
                pst.execute();            
                }catch(Exception e){
                    System.out.println("error updating dept level1 "+ e);
                }
			 try{
                    
            String sqll = "insert into '"+dept+""+2+"' (matric, name, me, mnsa)values (?,?,?,?) ";
			pst=conn.prepareStatement(sqll);
            pst.setString(1, newMatric);
            pst.setString(2, txtNewStudentName.getText().toUpperCase() );
            pst.setString(3,mod);
            pst.setInt(4, mnsa);
            
                pst.execute();            
                }catch(Exception e){
                    System.out.println("error updating dept level2 "+ e);
                }
            try{
                    
            String sqll = "insert into '"+dept+""+3+"' (matric, name, me, mnsa)values (?,?,?,?) ";
			pst=conn.prepareStatement(sqll);
            pst.setString(1, newMatric);
            pst.setString(2, txtNewStudentName.getText().toUpperCase() );
            pst.setString(3,mod);
            pst.setInt(4, mnsa);
            
                pst.execute();            
                }catch(Exception e){
                    System.out.println("error updating dept level3 "+ e);
                }
			try{
                    
            String sqll = "insert into '"+dept+""+4+"' (matric, name, me, mnsa)values (?,?,?,?) ";
			pst=conn.prepareStatement(sqll);
            pst.setString(1, newMatric);
            pst.setString(2, txtNewStudentName.getText().toUpperCase() );
            pst.setString(3,mod);
            pst.setInt(4, mnsa);
            
                pst.execute();            
                }catch(Exception e){
                    System.out.println("error updating dept level1 "+ e);
                }
           }
 rs.close();
 pst.close();
      }catch(Exception e){
          System.out.println("error  "+ e);
      }
      try{
      String sq="select* from "+dept+"students ";
      pst=conn.prepareStatement(sq);
      rs=pst.executeQuery();
      resultTable.setModel(DbUtils.resultSetToTableModel(rs));
      }catch(Exception e){System.out.println("displaying student "+ e);}
        txtNewStudentMatric.setText(null);
        txtNewStudentName.setText(null);
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed

        String course=(String)scoreCourse.getSelectedItem();
        //String session=(String)sessionCombo.getSelectedItem();
        String matric=txtmat.getText();
        String name=lblName.getText();
        String caa=txtca.getText();
        String exaam=txtexam.getText();
        String sem=session;
		String total=txtTotal.getText();
		
		try{
            String code=(String)scoreCourse.getSelectedItem();
            String sql = "select * from courses where code=?";
            pst=conn.prepareStatement(sql);
            pst.setString(1, code);
            rs=pst.executeQuery();
            if(rs.next()){
                cred=rs.getString("CREDIT");
            }
        }catch(Exception e){}
		
		int ca=0;
		int exam=0;
		
		if(!caa.trim().isEmpty()){ca=Integer.parseInt(caa);}
		if(!exaam.trim().isEmpty()){exam=Integer.parseInt(exaam);}
		
		if ( name == null || dept == null || matric.trim().isEmpty()){
		try{ 
                JOptionPane.showMessageDialog(null, txtmat.getText()+" this Matric does not exist in the selected program database !");
                int p=JOptionPane.YES_NO_OPTION;
                int b= JOptionPane.showConfirmDialog(this, "would you like to add the student to our database?","Add Student", p);
                
                if(b == 0){
                   sideBar.removeAll();
					sideBar.add(studentPane);
					sideBar.repaint();
					sideBar.revalidate();
					resultTable.setModel(new javax.swing.table.DefaultTableModel(
					new Object [][] {
           
						 },
						new String [] {
          
						 }
						));   
                }else if(b == 1){
					sideBar.removeAll();
					sideBar.add(scoreBar);
					sideBar.repaint();
					sideBar.revalidate();
				}
				else{
					sideBar.removeAll();
					sideBar.add(scoreBar);
					sideBar.repaint();
					sideBar.revalidate();
				}
            }catch(Exception e){}
        }
        
        if ((sem == null || course == null || matric == null )){
            try{
                JOptionPane.showMessageDialog(null, "Some Fields are empty!");
            } catch(Exception e){}
        }else if (total.trim().isEmpty()){
            try{
                JOptionPane.showMessageDialog(null, " Total Score not entered!");
            }catch(Exception e){}
        }
        
        else if(!(name.equals(null) && session.equals(null)&& dept.equals(null) && course.equals(null) && matric.equals(null) && total.equals(null))) {
           if(!fir.isSelected()|| !sec.isSelected()){
			   JOptionPane.showMessageDialog(null, " No Semester Selected!");
		   }else  if(fir.isSelected()|| sec.isSelected()){
				gp(ca, exam);
				clear1();
		   }
				//}catch(Exception e){System.out.println("gp "+ e);}
				
           try{
			String sq= "select * from "+dept+"scores where matric=? ";
			pst=conn.prepareStatement(sq);
			pst.setString(1, txtmat.getText());
			rs=pst.executeQuery();
			resultTable.setModel(DbUtils.resultSetToTableModel(rs));
		}
		catch(Exception e){}
			
            
		}
     
    }//GEN-LAST:event_btnsaveActionPerformed

	public  void clear1(){
                //txtmat.setText(null);
                //lblName.setText(null);
				txtTotal.setText(null);
                txtca.setText(null);
                txtexam.setText(null);
  
  }
   
    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        printHead=scoreCourse.getSelectedItem().toString();

        printSess=session;
        printType="ScoreSheet ";
        MessageFormat header = new MessageFormat( printHead+ " \n" + printSess +" "+ printType);
        MessageFormat footer = new MessageFormat("page");
        try{
            resultTable.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Unable to Print");
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed

        viewGp();
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        int row = resultTable.getSelectedRow();
        String code=resultTable.getModel().getValueAt(row, 1).toString();
        String cod=resultTable.getModel().getValueAt(row, 4).toString();

        try{
            String sql=" DELETE FROM gp WHERE matric=? and semester";
            pst=conn.prepareStatement(sql);
            pst.setString(1, code);
            pst.setString(2, cod);
            pst.execute();

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        viewGp();
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        chooser.setDialogTitle("Select only Excel 98-2003 workbooks");
        File file = chooser.getSelectedFile();

        try{

            if(file==null)
            {
                JOptionPane.showMessageDialog(
                    null, "Please select any Excel file",
                    "Help",
                    JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            else if(!file.getName().endsWith("xls"))
            {
                JOptionPane.showMessageDialog(
                    null, "Please select only Excel file that ends with .xls \n "
							+ "e.g 'result.xls'.",
                    "Error",JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                fillData(file);
                model = new DefaultTableModel(vectordata, headers);
                tableWidth = model.getColumnCount() * 150;
                tableHeight = model.getRowCount() * 25;
                resultTable.setPreferredSize(new Dimension( tableWidth, tableHeight));
                resultTable.setModel(model);
            }

        }   catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton23ActionPerformed

    private void importComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_importComboItemStateChanged
        String selection=(String) importCombo.getSelectedItem();
        if (selection.equalsIgnoreCase("courses")){
            importCourseCombo.setFocusable(false);
            importSessionCombo.setEditable(false);}
        else if (selection.equalsIgnoreCase("students")){
            importCourseCombo.setEditable(false);
            importSessionCombo.setEditable(false);}
    }//GEN-LAST:event_importComboItemStateChanged

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        String coss=(String) importCourseCombo.getSelectedItem();

        String ses=(String) importSessionCombo.getSelectedItem();
        String selection=(String) importCombo.getSelectedItem();
        String level;
        int row= resultTable.getRowCount();
        if(selection.equalsIgnoreCase("Students")){
            importCourseCombo.setEditable(false);
            importSessionCombo.setEditable(false);

            for(int i=0; i<row; i++){
                String mat=resultTable.getModel().getValueAt(i, 0).toString();
                String name=resultTable.getModel().getValueAt(i, 1).toString();
                String dept=resultTable.getModel().getValueAt(i, 2).toString();

                try{
                    String conf="select * from student where matric=? and name=?";
                    pst=conn.prepareStatement(conf);
                    pst.setString(1, mat);
                    pst.setString(2, dept);
                    ResultSet rs1=pst.executeQuery();
                    if(!rs1.next()){

                        try{
                            String sql="INSERT INTO student (matric, name, department) VALUES (?,?,?) ";
                            pst=conn.prepareStatement(sql);
                            pst.setString(1, mat);
                            pst.setString(2, name);
                            pst.setString(3, dept);
                            pst.execute();
                            JOptionPane.showMessageDialog(null, "Saved!");
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(null, "Saved!");
                        }
                    } else if(rs1.next()){

                        try{
                            String sql="update student (matric, name, department) VALUES (?,?,?) ";
                            pst=conn.prepareStatement(sql);
                            pst.setString(1, mat);
                            pst.setString(2, name);
                            pst.setString(3, dept);
                            pst.execute();
                            JOptionPane.showMessageDialog(null, "Saved!");
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(null, "Saved!");
                        }
                    }
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }

            }
        }else if(selection.equalsIgnoreCase("scores")) {
            int cu=Integer.parseInt( JOptionPane.showInputDialog("Enter Course Credit Unit"));

            for(int i=0; i<row; i++){
                try{
                    String mat=resultTable.getModel().getValueAt(i, 0).toString();
                    String name=resultTable.getModel().getValueAt(i, 1).toString();
                    String dept=resultTable.getModel().getValueAt(i, 2).toString();
                    int ca= Integer.parseInt(resultTable.getModel().getValueAt(row, 3).toString());
                    int exam= Integer.parseInt(resultTable.getModel().getValueAt(row, 4).toString());
                    int course1=ca+exam;
                    int gscore;

                    if(course1 >=70 &&  course1 <=100){

                        grade = "A";
                        gscore=5;
                        remark="Pass";

                    }
                    else if (course1 >=60 && course1<=69){
                        grade = "B";
                        gscore=4;
                        remark="Pass";

                    } else if (course1>=50 &&  course1 <=59){
                        grade = "C";
                        gscore=3;
                        remark="Pass";

                    }
                    else if(course1>=45&&  course1 <=49){
                        grade = "D";
                        gscore=2;
                        remark="Pass";

                    }else if(course1>=40 && course1<=44) {
                        grade="E";
                        gscore=1;
                        remark="Fair";

                    }
                    else{
                        grade="F";
                        gscore=0;
                        remark="Fail";
                    }
                    String gradeScore = Integer.toString(gscore);
                    if (gscore!=0){
                        int tce=cu*gscore;
                    } else {
                        int tce=gscore;
                    }
                    if(coss.endsWith("111")||coss.endsWith("112")||coss.endsWith("113")||coss.endsWith("114")||coss.endsWith("115")||coss.endsWith("116")||coss.endsWith("117")||coss.endsWith("118")||coss.endsWith("119")){
                        level="1";
                    }else if(coss.endsWith("211")||coss.endsWith("212")||coss.endsWith("213")||coss.endsWith("214")||coss.endsWith("215")||coss.endsWith("216")||coss.endsWith("217")||coss.endsWith("218")||coss.endsWith("219")){
                        level="2";
                    }else if(coss.endsWith("311")||coss.endsWith("312")||coss.endsWith("313")||coss.endsWith("314")||coss.endsWith("315")||coss.endsWith("316")||coss.endsWith("317")||coss.endsWith("318")||coss.endsWith("319")){
                        level="3";
                    }
                    else{
                        level="4";
                    }

                    try{
                        String sql = "update scores (MATRIC, NAME, DEPARTMENT, LEVEL, COURSE, C_U, SEMESTER, C_A, EXAM, TOTAL, GRADE, GRADESCORE, T_C_E, REMARK) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                        pst=conn.prepareStatement(sql);
                        pst.setString(1, mat);
                        pst.setString(2, name  );
                        pst.setString(3, dept);
                        pst.setString(4, level );
                        pst.setString(5, coss);
                        pst.setInt(6, cu);
                        pst.setString(7, ses);
                        pst.setInt(8, ca  );
                        pst.setInt(9, exam);
                        pst.setInt(10, course1 );
                        pst.setString(11,   grade );
                        pst.setInt(12,   gscore );
                        pst.setInt(13,   tce);
                        pst.setString(14,  remark  );

                        pst.execute();
                        JOptionPane.showMessageDialog(null,"Data is Updated successfully");
                        rs.close();
                        pst.close();

                    } catch(SQLException e){
                        JOptionPane.showMessageDialog(null, e);

                    }
                }catch(Exception e){
                    String g="invalid score entered";
                    JOptionPane.showMessageDialog(null,e);
                }

                finally{
                    try{
                        rs.close();
                        pst.close();
                    }catch(Exception e){
                        JOptionPane.showMessageDialog(null,e);
                    }

                }
            }
        }else if (selection.equalsIgnoreCase("courses")){
            importCourseCombo.setEditable(false);
            importSessionCombo.setEditable(false);
            for(int i=0; i<row; i++){
                String title=resultTable.getModel().getValueAt(i, 0).toString();
                String code=resultTable.getModel().getValueAt(i, 1).toString();
                int credit=Integer.parseInt(resultTable.getModel().getValueAt(i, 2).toString());

                try{
                    String sql="select * courses (title=? and code=? ";
                    pst=conn.prepareStatement(sql);
                    pst.setString(1, title);
                    pst.setString(2, code);
                    ResultSet rs4=pst.executeQuery();
                    if(!rs4.next()){

                        try{
                            String ins="INSERT INTO courses (title, code, credit) VALUES (?,?,?) ";
                            pst=conn.prepareStatement(ins);
                            pst.setString(1, title);
                            pst.setString(2, code);
                            pst.setInt(3, credit);
                            pst.execute();
                            JOptionPane.showMessageDialog(null, "Saved!");
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(null, "Saved!");
                        }
                    }else if(rs4.next()){

                        try{
                            String sq="update courses (title, code, credit) VALUES (?,?,?) ";
                            pst=conn.prepareStatement(sq);
                            pst.setString(1, title);
                            pst.setString(2, code);
                            pst.setInt(3, credit);
                            pst.execute();
                            JOptionPane.showMessageDialog(null, "Saved!");
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(null, "Saved!");
                        }
                    }
                    JOptionPane.showMessageDialog(null, "Saved!");
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Saved!");
                }

            }
        }
    }//GEN-LAST:event_jButton24ActionPerformed

    private void jMenu11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu11MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu11MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));       
        layeredPanel.removeAll();
        layeredPanel.add(homePanel);
        layeredPanel.repaint();
        layeredPanel.revalidate();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));       
        layeredPanel.removeAll();
        layeredPanel.add(panel);
        layeredPanel.repaint();
        layeredPanel.revalidate();
        
       
        sideBar.removeAll();
       sideBar.add(importBar);
       sideBar.repaint();
       sideBar.revalidate();
       
       resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));       

       
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed

	
        
		resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        )); 
        
        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        )); 
        layeredPanel.removeAll();
        layeredPanel.add(reportPanel);
        layeredPanel.repaint();
        layeredPanel.revalidate(); 
        
        reportLevelCombo.setSelectedItem(null);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

		
		if(dept==null){
			ArrayList <String> list=new ArrayList<>();
		JFrame frame = new JFrame("Input Dialog");
	list.clear();
        try{
        String sql="select * from departments  ";
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();
        while(rs.next()){
          
            list.add(rs.getString("department"));
        }
		rs.close();
		pst.close();
	}	catch (SQLException ex) {
			Logger.getLogger(MainCal.class.getName()).log(Level.SEVERE, null, ex);
		}
		
        String[] lists = list.toArray(new String[list.size()]);
		
     String depp = (String) JOptionPane.showInputDialog(
			 frame, "Select Your Department?", "Department",
			 JOptionPane.QUESTION_MESSAGE, null, lists, lists[0]);
                
		if (depp!=null){
			dept=depp;
			String de=dept;
			scoreCourse.removeAllItems();
			lblDept.setText("Department:    "+dept);
	lblSess.setText("Session:       "+session);
	clearTable();
	btngSem.clearSelection();
	semester=null;
		}
		
		}
		lblDept.setText("Department: "+dept);
	lblSess.setText("Session: "+session);
	btngSem.clearSelection();
	semester=null;
		resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));       
        layeredPanel.removeAll();
        layeredPanel.add(panel);
        layeredPanel.repaint();
        layeredPanel.revalidate();   
        
        sideBar.removeAll();
        sideBar.add(scoreBar);
        sideBar.repaint();
        sideBar.revalidate();     
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
       System.exit(0);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
			String de= dept;
             header2=de;
             header3= scoreCourse.getSelectedItem().toString()+"    "+  session;
             header4="SCORES";
             cCount=resultTable.getColumnCount();
              rCount=resultTable.getRowCount();
            
        
        if(chooser.showSaveDialog(this)==JFileChooser.APPROVE_OPTION){
// creating word document
try {
     d = new XWPFDocument();
     
     CTDocument1 document = d.getDocument();
     CTBody body = document.getBody();

if (!body.isSetSectPr()) {
     body.addNewSectPr();
}
CTSectPr section = body.getSectPr();

if(!section.isSetPgSz()) {
    section.addNewPgSz();
}
CTPageSz pageSize = section.getPgSz();

pageSize.setW(BigInteger.valueOf(15840));
pageSize.setH(BigInteger.valueOf(12240));

pageSize.setOrient(STPageOrientation.LANDSCAPE);
     
     
     FileOutputStream out = new FileOutputStream(new File(chooser.getSelectedFile().getAbsolutePath()+".docx"));
     
         word(header1,  header2, header3, header4,header5, cCount, rCount);
   
             d.write(out); 
             d.close();
JOptionPane.showMessageDialog(null, "Saved...");

              }
              catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
              }

}
        
     
        
        
        
        /*
        try{
           Workbook wb = new HSSFWorkbook();
    CreationHelper createhelper = wb.getCreationHelper();
    Sheet sheet = wb.createSheet("new sheet");
    Row row = null;
    Cell cell = null;
    for (int i=0;i<resultTable.getRowCount();i++) {
        row = sheet.createRow(i);
        for (int j=0;j<resultTable.getColumnCount();j++) {
             
            cell = row.createCell(j);
            cell.setCellValue((String) resultTable.getValueAt(i, j));
        }
    }
     
    
    FileOutputStream out = new FileOutputStream("E:\\workbook.xls");
    wb.write(out);
    out.close();
          

        
        
        
        } 

         catch (FileNotFoundException ex) {
    Logger.getLogger(ExportToExcel.class.getName()).log(Level.SEVERE, null, ex);
}       catch (IOException ex) { 
            Logger.getLogger(MainCal1.class.getName()).log(Level.SEVERE, null, ex);
        }     */ 
    }//GEN-LAST:event_jButton17ActionPerformed

    private void txtcaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcaKeyTyped
        try{
            char c= evt.getKeyChar();
        if(Character.isLetter(c)&& !evt.isAltDown()){
            evt.consume();
        }
        }catch(Exception e){}
		
    }//GEN-LAST:event_txtcaKeyTyped

    private void txtexamKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtexamKeyTyped
        try{
            char c= evt.getKeyChar();
        if(Character.isLetter(c)&& !evt.isAltDown()){
            evt.consume();
        }
        }catch(Exception e){}
		
    }//GEN-LAST:event_txtexamKeyTyped

    private void addStudentBarMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addStudentBarMouseMoved
        
    }//GEN-LAST:event_addStudentBarMouseMoved

    private void scorePanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scorePanelMouseMoved
        
    }//GEN-LAST:event_scorePanelMouseMoved

    private void courseSecondCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseSecondCheckActionPerformed
		 resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));
        lblStudentMsg1.setText(null);
		try{
        String sql= "select * from "+dept+"courses where level='"+2+"' order by code "; 
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();        
        if(rs.next()){
			resultTable.setModel(DbUtils.resultSetToTableModel(rs));
		}else{
		lblStudentMsg1.setText("No Courses Added for this Level!");
		}
		rs.close();
		pst.close();}catch(SQLException e){JOptionPane.showMessageDialog(null, e);}
    }//GEN-LAST:event_courseSecondCheckActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
       int row = resultTable.getSelectedRow();
        String code=resultTable.getModel().getValueAt(row, 1).toString();

        try{
            String sql=" DELETE FROM "+dept+"courses WHERE code=?";
            pst=conn.prepareStatement(sql);
            pst.setString(1, code);
            pst.execute();

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
		try{
        String sql= "select * from "+dept+"courses order by level "; 
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();        
        resultTable.setModel(DbUtils.resultSetToTableModel(rs));
		rs.close();
		pst.close();
		}catch(SQLException e){JOptionPane.showMessageDialog(null, e);}
       
       
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
		int row = resultTable.getSelectedRow();
        String mat=resultTable.getModel().getValueAt(row, 0).toString();
        String name=resultTable.getModel().getValueAt(row, 1).toString();

        try{
            String sql=" DELETE FROM student WHERE matric=? and name=?";
            pst=conn.prepareStatement(sql);
            pst.setString(1, mat);
            pst.setString(2, name);
            pst.execute();

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
		try{
            String sql=" DELETE FROM "+dept+"'students WHERE matric=? and name=?";
            pst=conn.prepareStatement(sql);
            pst.setString(1, mat);
            pst.setString(2, name);
            pst.execute();

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
		
       
            try{
        String sql= "select * from '"+dept+"'students order by matric "; 
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();        
        resultTable.setModel(DbUtils.resultSetToTableModel(rs));
        
                rs.close();
                pst.close();
        
        }catch(SQLException e){
        JOptionPane.showMessageDialog(null, e);
        }
        
       
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
        
             header2=dept;
             //header3= viewCourseCombo.getSelectedItem().toString()+"   "+ viewSessionCombo.getSelectedItem().toString();
             header4="Score Sheet";
             cCount=resultTable.getColumnCount();
              rCount=resultTable.getRowCount();
            
        
        if(chooser.showSaveDialog(this)==JFileChooser.APPROVE_OPTION){
// creating word document
try {
     d = new XWPFDocument();
     
     CTDocument1 document = d.getDocument();
     CTBody body = document.getBody();

if (!body.isSetSectPr()) {
     body.addNewSectPr();
}
CTSectPr section = body.getSectPr();

if(!section.isSetPgSz()) {
    section.addNewPgSz();
}
CTPageSz pageSize = section.getPgSz();

pageSize.setW(BigInteger.valueOf(15840));
pageSize.setH(BigInteger.valueOf(12240));

pageSize.setOrient(STPageOrientation.LANDSCAPE);
     
     
     FileOutputStream out = new FileOutputStream(new File(chooser.getSelectedFile().getAbsolutePath()+".docx"));
     
         word(header1,  header2, header3, header4,header5, cCount, rCount);
   
             d.write(out); 
             d.close();
JOptionPane.showMessageDialog(null, "Saved...");

              }
              catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
              }

}
        
     
    }//GEN-LAST:event_jButton29ActionPerformed

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed

             header2=dept;
           //  header3= buttonGroup2.getSelection().toString();
             header4="Courses";
             cCount=resultTable.getColumnCount();
              rCount=resultTable.getRowCount();
            
        
        if(chooser.showSaveDialog(this)==JFileChooser.APPROVE_OPTION){
// creating word document
try {
     d = new XWPFDocument();
     
     CTDocument1 document = d.getDocument();
     CTBody body = document.getBody();

if (!body.isSetSectPr()) {
     body.addNewSectPr();
}
CTSectPr section = body.getSectPr();

if(!section.isSetPgSz()) {
    section.addNewPgSz();
}
CTPageSz pageSize = section.getPgSz();

pageSize.setW(BigInteger.valueOf(15840));
pageSize.setH(BigInteger.valueOf(12240));

pageSize.setOrient(STPageOrientation.LANDSCAPE);
     
     
     FileOutputStream out = new FileOutputStream(new File(chooser.getSelectedFile().getAbsolutePath()+".docx"));
     
         
   
             d.write(out); 
             d.close();
JOptionPane.showMessageDialog(null, "Saved...");

              }
              catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
              }

}
        
     
    }//GEN-LAST:event_jButton30ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed

             header2=dept;
             //header3= buttonGroup2.getSelection().getSelectedObjects().toString();
             header4="STUDENTS' LIST";
             cCount=resultTable.getColumnCount();
              rCount=resultTable.getRowCount();
            
        
        if(chooser.showSaveDialog(this)==JFileChooser.APPROVE_OPTION){
// creating word document
try {
     d = new XWPFDocument();
     
     CTDocument1 document = d.getDocument();
     CTBody body = document.getBody();

if (!body.isSetSectPr()) {
     body.addNewSectPr();
}
CTSectPr section = body.getSectPr();

if(!section.isSetPgSz()) {
    section.addNewPgSz();
}
CTPageSz pageSize = section.getPgSz();

pageSize.setW(BigInteger.valueOf(15840));
pageSize.setH(BigInteger.valueOf(12240));

pageSize.setOrient(STPageOrientation.LANDSCAPE);
     
     
     FileOutputStream out = new FileOutputStream(new File(chooser.getSelectedFile().getAbsolutePath()+".docx"));
     
         word(header1,  header2, header3, header4,header5, cCount, rCount);
   
             d.write(out); 
             d.close();
JOptionPane.showMessageDialog(null, "Saved...");

              }
              catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
              }

}
        
     
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jMenu9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu9ActionPerformed
       
    }//GEN-LAST:event_jMenu9ActionPerformed

    private void jMenu9MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu9MouseMoved
    
    }//GEN-LAST:event_jMenu9MouseMoved

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
		reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));
        int level= Integer.parseInt(reportLevelCombo.getSelectedItem().toString());
		
		try{
			String st="STUDENTS";
			String su="summary";
			String sql="SELECT * from '"+dept+""+level+"' ";
            pst=conn.prepareStatement(sql);
			rs=pst.executeQuery();
			reportTable.setModel(DbUtils.resultSetToTableModel(rs));
			pst.close();
			rs.close();
		}catch(Exception e){JOptionPane.showMessageDialog(null, e);}
         
		 /*
		try{
           String s="DROP TABLE TempTable";
             pst=conn.prepareStatement(s);
            pst.execute();
            
          pst.close();
          rs.close();
            }catch(Exception e){
            //JOptionPane.showMessageDialog(null, e);
        }
         
       
          try{
              try{
            String sql="CREATE TABLE IF NOT EXISTS TempTable  as select * from CGPA";
            pst=conn.prepareStatement(sql);
            pst.execute();
            
          pst.close();
          rs.close();
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
          if(level==1){
            
        
         try{
         String se="SELECT d.matric, d.name, d.me, d.mnsa, d.nss FROM '"+dept+""+lev+"' join level1 on"
				 + " level1.matric= '"+dept+""+lev+"'.matric   ";
        
             pst=conn.prepareStatement(se);
            rs=pst.executeQuery();
           reportTable.setModel(DbUtils.resultSetToTableModel(rs));
          pst.close();
          rs.close();   
         
         }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        }
         else if(level==2){
             System.out.println("Second");
                try {
                    String see="SELECT T.matric, t.name, t.nss, l.tcr AS tcr1, l.tce AS tce1, "
							+ "l.tgp AS tgp1, l.gpa AS GPA1, l.tcr AS tcr2, le.tce AS tce2, le.tgp AS "
							+ "tgp2, le.gpa as GPA2, T.ctcr, T.ctcE, T.ctGP, T.cgpa  FROM TempTable t "
							+ "join level1 l on (l.matric= t.matriculation) join level2 le on"
							+ " (le.matric= t.matriculation) ";
                    pst=conn.prepareStatement(see);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));
                
          pst.close();
          rs.close();  
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
    }  
         else if(level==3){
             
                try {
                    String see="SELECT T.matriculation, t.name, t.nss, l.tcr AS tcr1, l.tce AS tce1, l.tgp "
							+ "AS tgp1, l.gpa AS GPA1, l.tcr AS tcr2, le.tce AS tce2, le.tgp AS tgp2, le.gpa"
							+ " as GPA2, lev.tcr as tcr3, lev.tce as tce3, lev.tgp as tgp3, lev.gpa as GPA3,"
							+ " T.ctcr, t.ctce, t.ctgp, T.cgpa  FROM TempTable t join level1 l on (l.matric= "
							+ "t.matriculation) join level2 le on (le.matric= t.matriculation) join level3 lev"
							+ " on (lev.matric= t.matriculation) ";
                    pst=conn.prepareStatement(see);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));
                
          pst.close();
          rs.close();  
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
    } else if (level==4){
               try {
                    String see="SELECT T.matriculation, t.name, t.nss, l.tcr AS tcr1, l.tce AS tce1, l.tgp AS "
							+ "tgp1, l.gpa AS GPA1, l.tcr AS tcr2, le.tce AS tce2, le.tgp AS tgp2, le.gpa as "
							+ "GPA2, lev.tcr as tcr3, lev.tce as tce3, lev.tgp as tgp3, lev.gpa as GPA3, leve.tcr "
							+ "as tcr4, leve.tce as tce4, leve.tgp as tgp4, leve.gpa as GPA4, T.ctcr,t.ctce,"
							+ " t.ctgp, T.cgpa  FROM TempTable t join level1 l on (l.matric= t.matriculation) "
							+ "join level2 le on (le.matric= t.matriculation) join level3 lev on (lev.matric= "
							+ "t.matriculation) join level4 leve on (leve.matric= t.matriculation) ";
                    pst=conn.prepareStatement(see);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));
                
          pst.close();
          rs.close();  
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
    }else{JOptionPane.showMessageDialog(null, "None of the Condition match");
    
    }   
          
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
           } 
        
          
          try{
           String s="DROP TABLE TempTable";
             pst=conn.prepareStatement(s);
            pst.execute();
            
          pst.close();
          rs.close();
            }catch(Exception e){
            //JOptionPane.showMessageDialog(null, e);
        }
		   */
    }//GEN-LAST:event_jButton19ActionPerformed

    private void addStudentLevelComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_addStudentLevelComboItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_addStudentLevelComboItemStateChanged

    private void addDeptBarMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addDeptBarMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_addDeptBarMouseMoved

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
      String dept= txtNewDept.getText().toUpperCase();
	  String sch= txtNewDept1.getText().toUpperCase();
		try{
		   
		   String sql="Select* from departments where department='"+dept+"' ";
		   pst=conn.prepareStatement(sql);
		   rs=pst.executeQuery();
		   pst.close();
		   rs.close();
		   if(rs.next()){
			   System.out.println("error creating dept already exist");
		   }else if(!rs.next()){
			   String sq="insert into departments (department, school)values (?, ?) ";
			   pst=conn.prepareStatement(sq);
			   pst.setString(1, dept);
			   pst.setString(2, sch);
			   pst.execute();
			   pst.close();
			   
			   
			   try{
				   String sqll="create table if not exists '"+dept+"' (MATRIC text,"
						   + " TCR1 INTEGER, TCE1 INTEGER, TGP1 INTEGER, GPA1 INTEGER)";
				   ps=conn.createStatement();
				   ps.executeUpdate(sqll);
				   ps.close();
		
        }catch(Exception e){System.out.println("error creating tbt "+e);}
		   }
		   try{
			   String s="summary";
				   String sqll="create table if not exists '"+dept+""+s+"' "
						   + "(MATRIC text, COD text, REMARK text)";
				   ps=conn.createStatement();
				   ps.executeUpdate(sqll);
				   ps.close();
		   }catch(Exception e){System.out.println("error creating  summ tbt"+e);}
		   
		   try{
			   String s="NSS";
				   String sqll="create table if not exists '"+dept+""+s+"' "
						   + "(MATRIC text, SESSION text, SEMESTER text)";
				   ps=conn.createStatement();
				   ps.executeUpdate(sqll);
				   ps.close();
		   }catch(Exception e){System.out.println("error creating  nss tbt "+e);}
		   try{
			   String s="STUDENTS";
				   String sqll="create table if not exists '"+dept+""+s+"' "
						   + "(MATRIC text, NAME text, ME text, MNSA integer, NSS integer)";
				   ps=conn.createStatement();
				   ps.executeUpdate(sqll);
				   ps.close();
		   }catch(Exception e){System.out.println("error creating std tbt"+e);;}
		   try{
			   String s="COURSES";
				   String sqll="create table if not exists '"+dept+""+s+"' "
						   + "(`TITLE` text, `CODE` text, `CREDIT` integer, `COURSE_LECTURER`"
						   + " TEXT, `LEVEL` TEXT, `SEMESTER` TEXT, `STATUS` TEXT)";
				   ps=conn.createStatement();
				   ps.executeUpdate(sqll);
				   ps.close();
		   }catch(Exception e){System.out.println("error creating course tbt "+e);}
		   try{
			   String s="SCORES";
				   String sqll="create table if not exists '"+dept+""+s+"'"
						   + " (`MATRIC` text, `NAME` text,  `LEVEL` integer, `COURSE` text, "
						   + "`CU` integer, `SESSION` text, `SEMESTER` integer, `TOTAL` integer,"
						   + " `GRADE` text, `CE` integer, `GP`integer, `REMARK` text)";
				   ps=conn.createStatement();
				   ps.executeUpdate(sqll);
				   ps.close();
		   }catch(Exception e){System.out.println("error creating scores tbt "+e);}
		   try{
        String sqll="create table if not exists '"+dept+""+1+"' ( `MATRIC`	VARCHAR, `NAME`	TEXT, "
				+ "`ME`	TEXT, `MNSA` TEXT, `NSS` TEXT )";
		ps=conn.createStatement();
		ps.executeUpdate(sqll);
		ps.close();
		
        }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
		    try{
        String sqel="create table if not exists '"+dept+""+2+"' ( `MATRIC`	VARCHAR, `NAME`	TEXT, "
				+ "`ME`	TEXT, `MNSA` TEXT, `NSS` TEXT )";
		ps=conn.createStatement();
		ps.executeUpdate(sqel);
		ps.close();
        }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
			   try{
        String sqel="create table if not exists '"+dept+""+3+"' ( `MATRIC`	VARCHAR, `NAME`	TEXT, "
				+ "`ME`	TEXT, `MNSA` TEXT, `NSS` TEXT )";
		ps=conn.createStatement();
		ps.executeUpdate(sqel);
		ps.close();
        }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
			   try{
        String sqel="create table if not exists '"+dept+""+4+"' ( `MATRIC`	VARCHAR, `NAME`	TEXT, "
				+ "`ME`	TEXT, `MNSA` TEXT, `NSS` TEXT )";
		ps=conn.createStatement();
		ps.executeUpdate(sqel);
		ps.close();
        }catch(Exception e){JOptionPane.showMessageDialog(null, e);}			   
		   
	   }catch(Exception e){
		   JOptionPane.showMessageDialog(null, e);
	   }
	   try{
		   String sql="Select* from departments where department='"+dept+"' ";
		   pst=conn.prepareStatement(sql);
		   rs=pst.executeQuery();
		   dialogTable.setModel(DbUtils.resultSetToTableModel(rs));
		    pst.close();
		   rs.close();
	   }catch(Exception e){
		   JOptionPane.showMessageDialog(null, e);
	   }
	   txtNewDept.setText(null);
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        		
			if(chooser.showSaveDialog(this)==JFileChooser.APPROVE_OPTION){

		// creating word document
		try {
			d = new XWPFDocument();
     
			CTDocument1 document = d.getDocument();
			CTBody body = document.getBody();

			if (!body.isSetSectPr()) {
				body.addNewSectPr();
				}
			CTSectPr section = body.getSectPr();

			if(!section.isSetPgSz()) {
				section.addNewPgSz();
				}
			CTPageSz pageSize = section.getPgSz();

			pageSize.setW(BigInteger.valueOf(15840));
			pageSize.setH(BigInteger.valueOf(12240));

			pageSize.setOrient(STPageOrientation.LANDSCAPE);
     
     
			countDown();
              }
              catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
              }

			}
		/*
		try{
            if (level==1){
				
                

            }else if (level==2){
                try{
                    String sql="select * from courses where (code like '%21_' or code like '%22_') and department='"+depts+"' ";
                    pst=conn.prepareStatement(sql);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
                try {
                    String see="SELECT T.matriculation, t.name, t.nss, l.tcr AS tcr1, l.tce AS tce1, l.tgp AS tgp1, "
                    + "l.gpa AS GPA1, l.tcr AS tcr2, le.tce AS tce2, le.tgp AS tgp2, le.gpa as GPA2, T.ctcr, T.ctcE, T.ctGP, T.cgpa  "
                    + "FROM cgpa t join level1 l on (l.matric= t.matriculation) join level2 le on (le.matric= t.matriculation) ";
                    pst=conn.prepareStatement(see);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));

                    pst.close();
                    rs.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }

            } else if (level==3){
                try{
                    String sql="select * from courses where (code like '%31_' or code like '%32_') and department='"+depts+"' ";
                    pst=conn.prepareStatement(sql);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
                try {
                    String see="SELECT T.matriculation, t.name, t.nss, l.tcr AS tcr1, l.tce AS tce1, "
                    + "l.tgp AS tgp1, l.gpa AS GPA1, l.tcr AS tcr2, le.tce AS tce2, le.tgp AS tgp2, "
                    + "le.gpa as GPA2, lev.tcr as tcr3, lev.tce as tce3, lev.tgp as tgp3, lev.gpa as GPA3,"
                    + " T.ctcr, t.ctce, t.ctgp, T.cgpa  FROM cgpa t join level1 l on (l.matric= t.matriculation) "
                    + "join level2 le on (le.matric= t.matriculation) join level3 lev on (lev.matric= t.matriculation) ";
                    pst=conn.prepareStatement(see);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));

                    pst.close();
                    rs.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
            }  else if (level==4){
                try{
                    String sql="select * from courses where (code like '%41_' or code like '%42_') and department='"+depts+"' ";
                    pst=conn.prepareStatement(sql);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
                try {
                    String see="SELECT T.matriculation, t.name, t.nss, l.tcr AS tcr1, l.tce AS tce1, l.tgp AS tgp1, "
                    + "l.gpa AS GPA1, l.tcr AS tcr2, le.tce AS tce2, le.tgp AS tgp2, le.gpa as GPA2, lev.tcr "
                    + "as tcr3, lev.tce as tce3, lev.tgp as tgp3, lev.gpa as GPA3, leve.tcr as tcr4, leve.tce"
                    + " as tce4, leve.tgp as tgp4, leve.gpa as GPA4, T.ctcr,t.ctce, t.ctgp, T.cgpa  "
                    + "FROM cgpa t join level1 l on (l.matric= t.matriculation) join level2 le on "
                    + "(le.matric= t.matriculation) join level3 lev on (lev.matric= t.matriculation)"
                    + " join level4 leve on (leve.matric= t.matriculation) ";
                    pst=conn.prepareStatement(see);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));

                    pst.close();
                    rs.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
                try {
                    String see="SELECT T.matriculation, t.name, t.nss, l.tcr AS tcr1, l.tce AS tce1, l.tgp AS tgp1, "
                    + "l.gpa AS GPA1, l.tcr AS tcr2, le.tce AS tce2, le.tgp AS tgp2, le.gpa as GPA2, lev.tcr "
                    + "as tcr3, lev.tce as tce3, lev.tgp as tgp3, lev.gpa as GPA3, leve.tcr as tcr4, leve.tce"
                    + " as tce4, leve.tgp as tgp4, leve.gpa as GPA4, T.ctcr,t.ctce, t.ctgp, T.cgpa  "
                    + "FROM cgpa t join level1 l on (l.matric= t.matriculation) join level2 le on "
                    + "(le.matric= t.matriculation) join level3 lev on (lev.matric= t.matriculation)"
                    + " join level4 leve on (leve.matric= t.matriculation) ";
                    pst=conn.prepareStatement(see);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));

                    pst.close();
                    rs.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
            }
        }catch(Exception e){
            lblReportMsg.setText("No Department or Level Selected!");
        }
		*/
    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton36ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton36ActionPerformed
      
		resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        )); 
       scoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        )); 
        
        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        )); 
		sessionSelect();
        layeredPanel.removeAll();
        layeredPanel.add(scorePanel);
        layeredPanel.repaint();
        layeredPanel.revalidate();
		try{
            String sq="select * from "+dept+"scores order by matric ";
            pst=conn.prepareStatement(sq);
            rs=pst.executeQuery();
			scoreTable.setModel(DbUtils.resultSetToTableModel(rs));
        }catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_jButton36ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        )); 
       scoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));
	   
	clearTable();
		sessionSelect();
        layeredPanel.removeAll();
        layeredPanel.add(scorePanel);
        layeredPanel.repaint();
        layeredPanel.revalidate();
		try{
            String sq="select * from "+dept+"scores order by matric";
            pst=conn.prepareStatement(sq);
            rs=pst.executeQuery();
            scoreTable.setModel(DbUtils.resultSetToTableModel(rs));
        }catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        

		lecturers();
        
        dialogTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));       
       
        
	clearTable();  

        layeredPanel.removeAll();
        layeredPanel.add(panel);
        layeredPanel.repaint();
        layeredPanel.revalidate();
        
        sideBar.removeAll();
        sideBar.add(coursePane);
        sideBar.repaint();
        sideBar.revalidate();
		try{
            String sq="select * from "+dept+"courses ";
            pst=conn.prepareStatement(sq);
            rs=pst.executeQuery();
            resultTable.setModel(DbUtils.resultSetToTableModel(rs));
        }catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
       lecturers();
        dialogTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));  
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));  layeredPanel.removeAll();
        layeredPanel.add(panel);
        layeredPanel.repaint();
        layeredPanel.revalidate();
        
        sideBar.removeAll();
        sideBar.add(studentPane);
        sideBar.repaint();
        sideBar.revalidate();
		try{
            String sq="select * from "+dept+"students ";
            pst=conn.prepareStatement(sq);
            rs=pst.executeQuery();
            resultTable.setModel(DbUtils.resultSetToTableModel(rs));
        }catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        

		lecturers();
        
        dialogTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));       
        dialog1.setVisible(true);
       
	clearTable();  

        dLayer.removeAll();
        dLayer.add(addDeptBar);
        dLayer.repaint();
        dLayer.revalidate(); 
		try{
            String sq="select * from departments ";
            pst=conn.prepareStatement(sq);
            rs=pst.executeQuery();
            dialogTable.setModel(DbUtils.resultSetToTableModel(rs));
        }catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void txtmatKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmatKeyTyped
        try{
            char c= evt.getKeyChar();
            if(Character.isLetter(c)&& !evt.isAltDown()){
                evt.consume();
            }else if(!(fir.isSelected() || sec.isSelected())){
				JOptionPane.showMessageDialog(null,"No Semester Selected!");
				evt.consume();
			}
        }catch(Exception e){

        }
    }//GEN-LAST:event_txtmatKeyTyped
static int matlev;
    private void txtmatKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmatKeyReleased
		lblName.setText(null);
		int lev=0;
		int flag=0;
		String lsession=null;
		try{
			String sq= "select * from "+dept+"scores where matric=? ";
			pst=conn.prepareStatement(sq);
			pst.setString(1, txtmat.getText());
			rs=pst.executeQuery();
			resultTable.setModel(DbUtils.resultSetToTableModel(rs));
		}
		catch(Exception e){}
        try{

            String sql ="select * from student where matric=? ";

            pst=conn.prepareStatement(sql);
            pst.setString(1,txtmat.getText());
            rs=pst.executeQuery();
            lblName.setText(rs.getString("NAME"));
			lev=rs.getInt("level");
			lsession=rs.getString("lsession");
            if(!rs.next()){
                JOptionPane.showMessageDialog(null, "Student does not Exist!");
            }
        }catch(Exception e){System.out.println("getting lsession"+e);}
		try{
            String sql="select * from "+dept+"NSS where matric=? and session=?  ";
            pst=conn.prepareStatement(sql);
            pst.setString(1, txtmat.getText());
			pst.setString(2, session);
            rs=pst.executeQuery();
            if(rs.next()){
               matlev=rs.getInt("level");
			   flag=1;
            }else if(!rs.next()){
				flag=2;
			}
        }catch(Exception e){JOptionPane.showMessageDialog(null, "getting nss "+e); }
		
		try{
			if(session.equalsIgnoreCase(lsession) && flag==1 && lev==matlev ){
			lev=matlev;
		}else if(!session.equalsIgnoreCase(lsession) && flag==2 && lev!=4){
			lev=lev+1;
		}else if(!session.equalsIgnoreCase(lsession) && flag==1 && lev>matlev){
			lev=matlev;
		}else if(!session.equalsIgnoreCase(lsession) && flag==1 && lev<matlev){
			lev=lev;
		}else if(!session.equalsIgnoreCase(lsession) && flag==2 && lev==4){
			lev=lev;
		}else if(!session.equalsIgnoreCase(lsession) && flag==1 && lev==4){
			lev=matlev;
		}
		}catch(Exception e){}

        try{
            scoreCourse.removeAllItems();
            String sql = "select * from "+dept+"courses where level<=? and semester=?";
            pst=conn.prepareStatement(sql);
            pst.setInt(1, lev);
			pst.setString(2, semester);
            rs=pst.executeQuery();
            while(rs.next()){
                scoreCourse.addItem(rs.getString("code"));
            }
        }catch(Exception e){}
        finally {
            try{
                rs.close();
                pst.close();
            }catch(Exception e){}
        }
    }//GEN-LAST:event_txtmatKeyReleased

    private void scoreCourseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scoreCourseMouseClicked
      
    }//GEN-LAST:event_scoreCourseMouseClicked

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        try{
            String sql =" select department from Departments  ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            while(rs.next()){
                userDeptCombo.addItem(rs.getString("department"));
            }
			rs.close();
			pst.close();
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
		try{
            String sql =" select * from users  ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            dialogTable.setModel(DbUtils.resultSetToTableModel(rs));
			rs.close();
			pst.close();
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        /*
        dialogTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));      */ 
       
	clearTable();

		scoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));       

        dLayer.removeAll();
        dLayer.add(userBar);
        dLayer.repaint();
        dLayer.revalidate();  
		userDeptCombo.setSelectedItem(null);
		try{
            String sq="select * from users ";
            pst=conn.prepareStatement(sq);
            rs=pst.executeQuery();
            dialogTable.setModel(DbUtils.resultSetToTableModel(rs));
        }catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jButton33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton33ActionPerformed
        String name=txtUserName.getText().toUpperCase();
		String user=txtUserUser.getText().toLowerCase();
		String pass=txtUserPass.getText().toLowerCase();
		String des=(String) userDesCombo.getSelectedItem();
		String lev=(String) userDesCombo1.getSelectedItem();
		String dept=(String) userDeptCombo.getSelectedItem();
		//String course=(String) userCourseCombo.getSelectedItem();
		String conf=null;
		try{
    String sql="select * from users where username=? ";
           pst=conn.prepareStatement(sql);
           pst.setString(1, user );
           rs=pst.executeQuery();
           if(rs.next()){
                try{System.out.println(user+"  Already Exist!!!");}catch(Exception e){
                   System.out.println("can't find the user "+ e);
                }  }  
        else if(!rs.next()){
             try{
            String sqle ="INSERT INTO users(name, department,  username, password, designation,"
					+ " level) VALUES ( ?,?,?,?,?,?) ";
            pst=conn.prepareStatement(sqle);
            pst.setString(1, name);
            pst.setString(2, dept );
            pst.setString(3,user);
            pst.setString(4, pass);
			pst.setString(5, des);
			pst.setString(6, lev);
            pst.execute();
            }catch(Exception e){System.out.println("can't add user because "+ e);}
           }
		   rs.close();
		   pst.close();
      }catch(Exception e){System.out.println("All "+ e);}
      try{
      String sq="select* from users ";
      pst=conn.prepareStatement(sq);
      rs=pst.executeQuery();
      dialogTable.setModel(DbUtils.resultSetToTableModel(rs));
      }catch(Exception e){System.out.println("can't display the user "+ e);}
	  
        if(conf==null || conf.equals(null)){
		txtUserName.setText(null);
		txtUserUser.setText(null);
		txtUserPass.setText(null);
		userDesCombo.setSelectedItem(null);
		userDeptCombo.setSelectedItem(null);
		//userCourseCombo.setSelectedItem(null);
		
		}
    }//GEN-LAST:event_jButton33ActionPerformed

    private void userBarMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userBarMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_userBarMouseMoved

    private void jButton35ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton35ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton35ActionPerformed

    private void jButton37ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton37ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton37ActionPerformed

    private void userDeptComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_userDeptComboItemStateChanged
         
    }//GEN-LAST:event_userDeptComboItemStateChanged

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        printHead="FEDERAL COLLEGE OF EDUCATION, PANKSHIN \n";

        printSess=dept+" DEPARTMENT \n "+" Level "+ lev;
        printType="\n RESULT ";
        MessageFormat header = new MessageFormat( printHead+ " \n" + printSess +" "+ printType);
        MessageFormat footer = new MessageFormat("page");
        try{
            reportTable.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Unable to Print");
        }
    }//GEN-LAST:event_jButton25ActionPerformed

    private void addCourseBarMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addCourseBarMouseMoved

    }//GEN-LAST:event_addCourseBarMouseMoved

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        String lecturer= (String) txtNewCourseLecturer.getSelectedItem();
        String code = txtNewCourseCode1.getText().toUpperCase();
		String cl=comboNewCourseCredit.getSelectedItem().toString();
		String status= (String) comboNewCourseCredit1.getSelectedItem();
        String sem = (String) AddCourseSemesterCombo1.getSelectedItem();
		String lev=(String) comboNewCourseCredit2.getSelectedItem();
		
		if (lev.equalsIgnoreCase(null)||code.trim().isEmpty()){
			lblStudentMsg2.setText("No level Selected \n or Course Code Entered");
		}else{
        try{
            String sql="select * from courses where code=? ";
            pst=conn.prepareStatement(sql);
            pst.setString(1, code );
            rs=pst.executeQuery();
            if(rs.next()){
                try{
                    String sqll = "update courses set title=?, code=?, credit=? ,"
							+ " course_lecturer=?, status=? WHERE code='"+code+"' ";
                    pst=conn.prepareStatement(sqll);
                    pst.setString(1, txtNewCourseTitle.getText().toUpperCase());
                    pst.setString(2, code);
                    pst.setString(3, comboNewCourseCredit.getSelectedItem().toString());
                    pst.setString(4, lecturer);
					pst.setString(5, status);
                    pst.execute();
					System.out.println("updated");
                }catch(Exception e){System.out.println("course update error "+e);}
				try{
                    String sqll = "update "+dept+"courses set title=?, code=?, credit=? ,"
							+ " course_lecturer=?, status=?, semester=?, level=? WHERE code='"+code+"' ";
                    pst=conn.prepareStatement(sqll);
                    pst.setString(1, txtNewCourseTitle.getText().toUpperCase());
                    pst.setString(2, code);
                    pst.setString(3, comboNewCourseCredit.getSelectedItem().toString());
                    pst.setString(4, lecturer);
					pst.setString(5, status);
					pst.setString(6, sem);
					pst.setString(7, lev);
                    pst.execute();
					System.out.println("updated");
                }catch(Exception e){System.out.println("course update error "+e);}
            }
            else if(!rs.next()){
                try{
                    String sqll = "INSERT INTO courses (title, code, credit, department, semester,"
                    + " COURSE_LECTURER, status) VALUES ( ?, ?, ?,?,?,?,?)";
                    pst=conn.prepareStatement(sqll);
                    pst.setString(1, txtNewCourseTitle.getText().toUpperCase());
                    pst.setString(2, code);
                    pst.setString(3, comboNewCourseCredit.getSelectedItem().toString());
                    pst.setString(4, dept);
                    pst.setString(5, sem);
                    pst.setString(6, lecturer);
					pst.setString(7, status);
                    pst.execute();
					 rs.close();
					 pst.close();
				}catch(Exception e){System.out.println("course insert error "+e);}
				try{
                    String sqll = "INSERT INTO "+dept+"courses (title, code, credit, "
							+ " semester, COURSE_LECTURER, status, level) VALUES ( ?, ?, ?,?,?,?,?)";
                    pst=conn.prepareStatement(sqll);
                    pst.setString(1, txtNewCourseTitle.getText().toUpperCase());
                    pst.setString(2, code);
                    pst.setString(3, comboNewCourseCredit.getSelectedItem().toString());
					pst.setString(4, sem);
                    pst.setString(5, lecturer);
					pst.setString(6, status);
					pst.setString(7, lev);
                    pst.execute();
					 pst.close();
				}catch(Exception e){System.out.println("course insert error "+e);}
				 }
               	try{
                    String sq=" alter table '"+dept+""+lev+"' add '"+code+""+" ("+cl+")"+"' ";
                    pst=conn.prepareStatement(sq);
                    pst.executeUpdate();
                    pst.close();
					System.out.println("Inserted");
                }catch(Exception e){System.out.println(e);}
				try{
                    String sq=" alter table '"+dept+""+lev+"' add '"+code+""+"GP"+"' ";
                    pst=conn.prepareStatement(sq);
                    pst.executeUpdate();
                    pst.close();
					System.out.println("Inserted");
                }catch(Exception e){System.out.println("error adding course Gp into lev tbl "+e);}
				try{
                    String sq="CREATE TABLE if not exists '"+code+"' (`MATRIC`	TEXT NOT NULL, "
				+ "`NAME`	TEXT NOT NULL,"
				+ "`DEPARTMENT`	TEXT, `SESSION`	TEXT, `CA`	INTEGER,	`EXAM`"
				+ "	INTEGER,	`TOTAL`	INTEGER,	`GRADE`	TEXT, `GP`	INTEGER,	"
				+ "`REMARK`	TEXT )";
					pst=conn.prepareStatement(sq);
					pst.execute();
					pst.close();
                }catch(Exception e){System.out.println(e);}
				}catch(Exception e){System.out.println(e);}
		}
		lblStudentMsg2.setText(null);
		try{
            String sq="select * from "+dept+"courses ";
            pst=conn.prepareStatement(sq);
            rs=pst.executeQuery();
            resultTable.setModel(DbUtils.resultSetToTableModel(rs));
        }catch(Exception e){System.out.println(e);}
				
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jMenuItem10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem10MouseClicked
        // 3 previous years
        DateTimeFormatter f11 = DateTimeFormatter.ofPattern("YYYY");
        DateTimeFormatter h11 = DateTimeFormatter.ofPattern("YY");
        LocalDate now11=LocalDate.now().minusYears(2);
        LocalDate date11=LocalDate.now().minusYears(3);
        String bf11 = date11.format(f11);
        String aft11= now11.format(h11);
        // 2 previous years
        DateTimeFormatter f1 = DateTimeFormatter.ofPattern("YYYY");
        DateTimeFormatter h1 = DateTimeFormatter.ofPattern("YY");
        LocalDate now1=LocalDate.now().minusYears(1);
        LocalDate date1=LocalDate.now().minusYears(2);
        String bf1 = date1.format(f1);
        String aft1= now1.format(h1);
        //previous session
        DateTimeFormatter f = DateTimeFormatter.ofPattern("YYYY");
        DateTimeFormatter h = DateTimeFormatter.ofPattern("YY");
        LocalDate now=LocalDate.now();
        LocalDate date=LocalDate.now().minusYears(1);
        String bf = date.format(f);
        String nw= now.format(h);
        //next session
        DateTimeFormatter ff = DateTimeFormatter.ofPattern("YY");
        DateTimeFormatter hh = DateTimeFormatter.ofPattern("YYYY");
        LocalDate noww=LocalDate.now();
        LocalDate later=LocalDate.now().plusYears(1);
        String la = later.format(ff);
        String nww= noww.format(hh);

        String prevvv = bf11+"/"+aft11;
        String prevv = bf1+"/"+aft1;
        String prev = bf+"/"+nw;
        String next = nww+"/"+la;

        int l=0;
		if(session.equalsIgnoreCase(next)){
			l=0;
		}else if(session.equalsIgnoreCase(prev)){
			l=1;
		}else if(session.equalsIgnoreCase(prevv)){
			l=2;
		}else if(session.equalsIgnoreCase(prevvv)){
			l=3;
		}
		
		JFrame frame = new JFrame("Input Dialog");      
		String[] lists ={next, prev, prevv, prevvv };		
		session = (String) JOptionPane.showInputDialog(
			 frame, "Change Session?", "Session",
			 JOptionPane.QUESTION_MESSAGE, null, lists, lists[l]);
		scoreCourse.removeAllItems();
			txtmat.setText(null);
		scoreCourse.removeAllItems();
	lblDept.setText("Department:    "+dept);
	lblSess.setText("Session:       "+session);
	clearTable();
	btngSem.clearSelection();
	semester=null;
    }//GEN-LAST:event_jMenuItem10MouseClicked

    private void jMenuItem11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem11MouseClicked
        JFrame frame = new JFrame("Input Dialog");
        String[] lists ={"First", "Second"};
       int l=0;
		if(semester.equalsIgnoreCase("First")){
			l=0;
		}else{
			l=1;
		}
        semester= (String) JOptionPane.showInputDialog(
            frame, "Change Semester?", "Semester",
            JOptionPane.QUESTION_MESSAGE, null, lists, lists[l]);
       scoreCourse.removeAllItems();
			txtmat.setText(null);
		scoreCourse.removeAllItems();
	lblDept.setText("Department:    "+dept);
	lblSess.setText("Session:       "+session);
	clearTable();
    }//GEN-LAST:event_jMenuItem11MouseClicked

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // 3 previous years
        DateTimeFormatter f11 = DateTimeFormatter.ofPattern("YYYY");
        DateTimeFormatter h11 = DateTimeFormatter.ofPattern("YY");
        LocalDate now11=LocalDate.now().minusYears(2);
        LocalDate date11=LocalDate.now().minusYears(3);
        String bf11 = date11.format(f11);
        String aft11= now11.format(h11);
        // 2 previous years
        DateTimeFormatter f1 = DateTimeFormatter.ofPattern("YYYY");
        DateTimeFormatter h1 = DateTimeFormatter.ofPattern("YY");
        LocalDate now1=LocalDate.now().minusYears(1);
        LocalDate date1=LocalDate.now().minusYears(2);
        String bf1 = date1.format(f1);
        String aft1= now1.format(h1);
        //previous session
        DateTimeFormatter f = DateTimeFormatter.ofPattern("YYYY");
        DateTimeFormatter h = DateTimeFormatter.ofPattern("YY");
        LocalDate now=LocalDate.now();
        LocalDate date=LocalDate.now().minusYears(1);
        String bf = date.format(f);
        String nw= now.format(h);
        //next session
        DateTimeFormatter ff = DateTimeFormatter.ofPattern("YY");
        DateTimeFormatter hh = DateTimeFormatter.ofPattern("YYYY");
        LocalDate noww=LocalDate.now();
        LocalDate later=LocalDate.now().plusYears(1);
        String la = later.format(ff);
        String nww= noww.format(hh);

        String prevvv = bf11+"/"+aft11;
        String prevv = bf1+"/"+aft1;
        String prev = bf+"/"+nw;
        String next = nww+"/"+la;

        int l=0;
		if(session.equalsIgnoreCase(next)){
			l=0;
		}else if(session.equalsIgnoreCase(prev)){
			l=1;
		}else if(session.equalsIgnoreCase(prevv)){
			l=2;
		}else if(session.equalsIgnoreCase(prevvv)){
			l=3;
		}else{
			l=0;
		}
		
		JFrame frame = new JFrame("Input Dialog");      
		String[] lists ={next, prev, prevv, prevvv };		
		session = (String) JOptionPane.showInputDialog(
			 frame, "Change Session?", "Session",
			 JOptionPane.QUESTION_MESSAGE, null, lists, lists[l]);
		scoreCourse.removeAllItems();
			txtmat.setText(null);
		scoreCourse.removeAllItems();
	lblDept.setText("Department:    "+dept);
	lblSess.setText("Session:       "+session);
	clearTable();
	btngSem.clearSelection();
	semester=null;
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        JFrame frame = new JFrame("Input Dialog");
        String[] lists ={"First", "Second"};
		int l=0;
		if(semester.equalsIgnoreCase("First")){
			l=0;
		}else{
			l=1;
		}
        semester= (String) JOptionPane.showInputDialog(
            frame, "Change Semester?", "Semester",
            JOptionPane.QUESTION_MESSAGE, null, lists, lists[l]);

        scoreCourse.removeAllItems();
			txtmat.setText(null);
		scoreCourse.removeAllItems();
		
	lblDept.setText("Department:    "+dept);
	lblSess.setText("Session:       "+session);
	clearTable();
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void courseSecondCheck1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseSecondCheck1ActionPerformed
         clearTable();
        lblStudentMsg1.setText(null);
		try{
        String sql= "select * from "+dept+"courses where level='"+3+"' order by code "; 
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();        
        if(rs.next()){
			resultTable.setModel(DbUtils.resultSetToTableModel(rs));
		}else{
		lblStudentMsg1.setText("No Courses Added for this Level!");
		}
		rs.close();
		pst.close();}catch(SQLException e){JOptionPane.showMessageDialog(null, e);}
    }//GEN-LAST:event_courseSecondCheck1ActionPerformed

    private void courseSecondCheck2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseSecondCheck2ActionPerformed
        clearTable();
        lblStudentMsg1.setText(null);
		try{
        String sql= "select * from "+dept+"courses where level='"+4+"' order by code "; 
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();        
        if(rs.next()){
			resultTable.setModel(DbUtils.resultSetToTableModel(rs));
		}else{
		lblStudentMsg1.setText("No Courses Added for this Level!");
		}
		rs.close();
		pst.close();}catch(SQLException e){JOptionPane.showMessageDialog(null, e);}
    }//GEN-LAST:event_courseSecondCheck2ActionPerformed

    private void courseAllCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseAllCheckActionPerformed

		clearTable();
        lblStudentMsg1.setText(null);
		try{
        String sql= "select * from "+dept+"courses order by code "; 
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();        
        if(rs.next()){
			resultTable.setModel(DbUtils.resultSetToTableModel(rs));
		}else{
		lblStudentMsg1.setText("No Courses Added!");
		}
		rs.close();
		pst.close();}catch(SQLException e){JOptionPane.showMessageDialog(null, e);}
        
        
    }//GEN-LAST:event_courseAllCheckActionPerformed

    private void courseFirstCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseFirstCheckActionPerformed
       clearTable();
        lblStudentMsg1.setText(null);
		try{
        String sql= "select * from "+dept+"courses where level='"+1+"' order by code "; 
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();        
        if(rs.next()){
			resultTable.setModel(DbUtils.resultSetToTableModel(rs));
		}else{
		lblStudentMsg1.setText("No Courses Added for this Level!");
		}
		rs.close();
		pst.close();}catch(SQLException e){JOptionPane.showMessageDialog(null, e);}
    }//GEN-LAST:event_courseFirstCheckActionPerformed

    private void txtTotalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTotalKeyTyped
        try{
            char c= evt.getKeyChar();
        if(Character.isLetter(c)&& !evt.isAltDown()){
            evt.consume();
        }
        }catch(Exception e){}
		txtca.setText(null);
		txtexam.setText(null);
		try{
            String code=(String)scoreCourse.getSelectedItem();
            String sql = "select * from courses where code=?";
            pst=conn.prepareStatement(sql);
            pst.setString(1, code);
            rs=pst.executeQuery();
            if(rs.next()){
                cred=rs.getString("CREDIT");
            }
        }catch(Exception e){}
    }//GEN-LAST:event_txtTotalKeyTyped
	private void clearTable(){
		resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
           
            },
            new String [] {
          
            }
        ));
	}
    private void firMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_firMouseClicked
        semester="First";
		txtmat.setText(null);
		scoreCourse.removeAllItems();
		clearTable();
    }//GEN-LAST:event_firMouseClicked

    private void secMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_secMouseClicked
        semester="Second";
		txtmat.setText(null);
		scoreCourse.removeAllItems();
		clearTable();
    }//GEN-LAST:event_secMouseClicked

    private void txtcaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcaKeyReleased
        int ca=0;
		int ex=0;
		String caa=txtexam.getText();
		String exaam=txtca.getText();
		if(!caa.trim().isEmpty()){ca=Integer.parseInt(caa);}
		if(!exaam.trim().isEmpty()){ex=Integer.parseInt(exaam);}
		String tot=Integer.toString(ca+ex);
		txtTotal.setText(tot);
		try{
            String code=(String)scoreCourse.getSelectedItem();
            String sql = "select * from courses where code=?";
            pst=conn.prepareStatement(sql);
            pst.setString(1, code);
            rs=pst.executeQuery();
            if(rs.next()){
                cred=rs.getString("CREDIT");
            }
        }catch(Exception e){}
    }//GEN-LAST:event_txtcaKeyReleased

    private void txtexamKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtexamKeyReleased
        int ca=0;
		int ex=0;
		String caa=txtexam.getText();
		String exaam=txtca.getText();
		if(!caa.trim().isEmpty()){ca=Integer.parseInt(caa);}
		if(!exaam.trim().isEmpty()){ex=Integer.parseInt(exaam);}
		String tot=Integer.toString(ca+ex);
		txtTotal.setText(tot);
		try{
            String code=(String)scoreCourse.getSelectedItem();
            String sql = "select * from courses where code=?";
            pst=conn.prepareStatement(sql);
            pst.setString(1, code);
            rs=pst.executeQuery();
            if(rs.next()){
                cred=rs.getString("CREDIT");
            }
        }catch(Exception e){}
    }//GEN-LAST:event_txtexamKeyReleased
    
    
    
    
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainCal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainCal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainCal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainCal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainCal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> AddCourseSemesterCombo1;
    private javax.swing.JPanel addCourseBar;
    private javax.swing.JPanel addDeptBar;
    private javax.swing.JPanel addStudentBar;
    private javax.swing.JComboBox<String> addStudentLevelCombo;
    private javax.swing.ButtonGroup btngSem;
    private javax.swing.JButton btnsave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> comboNewCourseCredit;
    private javax.swing.JComboBox<String> comboNewCourseCredit1;
    private javax.swing.JComboBox<String> comboNewCourseCredit2;
    private javax.swing.JCheckBox courseAllCheck;
    private javax.swing.JCheckBox courseFirstCheck;
    private javax.swing.JPanel coursePane;
    private javax.swing.JCheckBox courseSecondCheck;
    private javax.swing.JCheckBox courseSecondCheck1;
    private javax.swing.JCheckBox courseSecondCheck2;
    private javax.swing.JLayeredPane dLayer;
    private javax.swing.JFrame dialog1;
    private javax.swing.JTable dialogTable;
    private javax.swing.JRadioButton fir;
    private javax.swing.JPanel gpBar;
    private javax.swing.JPanel homePanel;
    private javax.swing.JPanel importBar;
    private javax.swing.JComboBox<String> importCombo;
    private javax.swing.JComboBox<String> importCourseCombo;
    private javax.swing.JComboBox<String> importSessionCombo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton33;
    private javax.swing.JButton jButton35;
    private javax.swing.JButton jButton36;
    private javax.swing.JButton jButton37;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLayeredPane layeredPanel;
    private javax.swing.JLabel lblDept;
    private javax.swing.JLabel lblName;
    public javax.swing.JLabel lblReportMsg;
    private javax.swing.JLabel lblSess;
    private javax.swing.JLabel lblStudentMsg1;
    private javax.swing.JLabel lblStudentMsg2;
    private javax.swing.JLabel lblUser;
    private javax.swing.JLabel lblUserH;
    private javax.swing.JLabel nA;
    private javax.swing.JLabel nCourse;
    private javax.swing.JLabel nF;
    private javax.swing.JLabel nLev;
    private javax.swing.JLabel nP;
    private javax.swing.JLabel nStud;
    private javax.swing.JComboBox<String> newStudentDeptCombo1;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel panel2;
    public javax.swing.JProgressBar progress1;
    private javax.swing.JComboBox<String> reportLevelCombo;
    private javax.swing.JMenu reportMenu;
    private javax.swing.JPanel reportPanel;
    private javax.swing.JTable reportTable;
    private javax.swing.JTable resultTable;
    private javax.swing.JPanel scoreBar;
    private javax.swing.JComboBox<String> scoreCourse;
    private javax.swing.JPanel scorePanel;
    private javax.swing.JTable scoreTable;
    private javax.swing.JRadioButton sec;
    private javax.swing.JLayeredPane sideBar;
    private javax.swing.JPanel studentPane;
    private javax.swing.JPanel tablePane;
    private javax.swing.JTextField txtNewCourseCode1;
    private javax.swing.JComboBox<String> txtNewCourseLecturer;
    private javax.swing.JTextField txtNewCourseTitle;
    private javax.swing.JTextField txtNewDept;
    private javax.swing.JTextField txtNewDept1;
    private javax.swing.JTextField txtNewStudentMatric;
    private javax.swing.JTextField txtNewStudentName;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtUserName;
    private javax.swing.JTextField txtUserPass;
    private javax.swing.JTextField txtUserUser;
    private javax.swing.JTextField txtca;
    private javax.swing.JTextField txtexam;
    public javax.swing.JTextField txtmat;
    private javax.swing.JPanel userBar;
    private javax.swing.JComboBox<String> userDeptCombo;
    private javax.swing.JComboBox<String> userDesCombo;
    private javax.swing.JComboBox<String> userDesCombo1;
    private javax.swing.JMenu viewMenu;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
public static String dept;
public static String printHead;
public static String printSess;
public static String printType;
public static String header2;
public static String header3;
public static String header4;
public static String header5;
public static String header1= "FEDERAL COLLEGE OF EDUCATION, PANKSHIN";
public static String school;
public static int cCount= 0;
public static int rCount= 0;
public static String code;
public static String gpa;
public static int tGp;
 public static int tce;
public static int tcr;
public static int ce;
public static int gp;
public static String cred;
public static String remark;
public static String grade;
public static String lev;
public static String usName;
public static String usCourse;
public static String designation;
public static String course;
public static String level1GP;
public static  String level2GP;
public static String level3GP;
public static String level4GP;
public static String result; 
public static  XWPFDocument d;
public static Document document;
 public static JFileChooser chooser = new JFileChooser();
public static JFrame frame;

public static String[] studCount; 
public static String [] student;
public static String course1Total;
public static int tot;
public static String NCE;
public static String Degree;
public static Vector headers = new Vector(); 
public static Vector vectordata = new Vector();
public static DefaultTableModel model = null; 
public static int tableWidth = 0;
public static int tableHeight = 0; 
public static String rLevel  ;
public static String rDept;
public static String session;
public static int nPass;
public static int nFail;
public static int nStudent;
public static int nAbsent;
public static int scoreCourseLev;
public static String semester;
public static String lecturer;
public static String rco;
public static NumberFormat nbf = NumberFormat.getNumberInstance();

FileOutputStream out;

ArrayList<Runnable> events = new ArrayList<Runnable>(); 

public void gp(int ca, int exam ){
    
       String course=(String)scoreCourse.getSelectedItem();
       String matric=txtmat.getText();
       
       String name=lblName.getText();
       int total=Integer.parseInt(txtTotal.getText());   
       int cu=Integer.parseInt(cred);
       
        if(total >=70 &&  total <=100){
                
              grade = "A";
              ce=5;
              remark="Pass";
              ;
            }
            else if (total >=60 && total<=69){
                grade = "B";
                ce=4;
                remark="Pass";
                
               
            } else if (total>=50 &&  total <=59){
               grade = "C";
               ce=3;
               remark="Pass";
               
            }
            else if(total>=45&&  total <=49){
                 grade = "D";
                 ce=2;
                 remark="Pass";
               
            }else if(total>=40 && total<=44) {
                grade="E";
                ce=1;
                remark="Pass";
               
            }
            else{
                grade="F";
               ce=0;
                remark="Fail";
            }
        
        
        try{
           String sql="select * from courses where code=? ";
           pst=conn.prepareStatement(sql);
          pst.setString(1, course);
           rs=pst.executeQuery();
           if(rs.next()){
               cu=rs.getInt("CREDIT");
           }
           rs.close();
           pst.close();
       }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
           
       }
	 // multiplying the credit earned by the course credit Unit 
		gp=ce*cu;
 
       //inserting the result into the database
       try{
       String sql= "select* from scores where matric=? and course='"+course+"'";
           pst=conn.prepareStatement(sql);
           pst.setString(1, matric);
           rs=pst.executeQuery();
           if(rs.next()){
               
        try{
            String updateScore = "update scores set SEMESTER=?, CA=?, EXAM=?,"
					+ " TOTAL=?, GRADE=?, CE=?, gp=?, REMARK=?, session=? where"
					+ " matric='"+matric+"' and course='"+course+"'";

                pst=conn.prepareStatement(updateScore);
              pst.setString(1, semester);
              pst.setInt(2, ca);
              pst.setInt(3, exam);
              pst.setInt(4, total);
              pst.setString(5, grade);
              pst.setInt(6, ce);
              pst.setInt(7, gp);
              pst.setString(8, remark);
			  pst.setString(9, session);
			  pst.execute();
        rs.close();
        pst.close();
        }catch(Exception e){
        JOptionPane.showMessageDialog(null, "Score Update error");
        }        
           }else if (!rs.next()){ 
			   try{
            String insertScore = "insert into scores (MATRIC, NAME, DEPARTMENT, LEVEL,"
					+ " COURSE, CU, SEMESTER, CA, EXAM, TOTAL, GRADE, CE, gp, REMARK, session) "
					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                pst=conn.prepareStatement(insertScore);
                pst.setString(1, matric);
                pst.setString(2, name );
                pst.setString(3, dept );
                pst.setString(4, null );
                pst.setString(5, course);
                pst.setString(6, Integer.toString(cu));
                pst.setString(7, semester);
                pst.setString(8,Integer.toString(ca) );
                pst.setString(9, Integer.toString(exam)  );
                pst.setString(10, Integer.toString(total) );
                pst.setString(11,   grade );
                pst.setString(12,   Integer.toString(ce) );
                pst.setString(13,  Integer.toString(gp) );
                pst.setString(14,  remark  );
				pst.setString(15,  session  );
                pst.execute();
        rs.close();
        pst.close();}catch(Exception e){JOptionPane.showMessageDialog(null, e);}
			  
           }
	   }catch(Exception e){JOptionPane.showMessageDialog(null, "Score insertion erro1");}
	   
	   //inserting the result into the course database
       try{
		   String sql= "select* from '"+course+"' where matric=? ";
           pst=conn.prepareStatement(sql);
           pst.setString(1, matric);
           rs=pst.executeQuery();
           if(rs.next()){
			   try{
            String updateScore = "update '"+course+"' set  CA=?, "
					+ "EXAM=?, TOTAL=?, GRADE=?, gp=?, REMARK=?,"
					+ " session=? where matric='"+matric+"'";
			pst=conn.prepareStatement(updateScore);
              
              pst.setInt(1, ca);
              pst.setInt(2, exam);
              pst.setInt(3, total);
              pst.setString(4, grade);
              pst.setInt(5, gp);
              pst.setString(6, remark);
			  pst.setString(7, session);
			  pst.execute();
			  rs.close();
			  pst.close();
			   } catch(Exception e){JOptionPane.showMessageDialog(null, "coures score insertion error1");}
		   }else if (!rs.next()){
			   try{
				   String insertScore = "insert into '"+course+"' (MATRIC, NAME, DEPARTMENT, "
						   + "  CA, EXAM, TOTAL, GRADE,  gp, REMARK, session) VALUES (?, ?, ?, ?, "
						   + "?, ?, ?, ?, ?, ?)";

                pst=conn.prepareStatement(insertScore);
                pst.setString(1, matric);
                pst.setString(2, name );
                pst.setString(3, dept );
                pst.setString(4,Integer.toString(ca) );
                pst.setString(5, Integer.toString(exam)  );
                pst.setString(6, Integer.toString(total) );
                pst.setString(7,   grade );
                pst.setString(8,  Integer.toString(gp) );
                pst.setString(9,  remark  );
				pst.setString(10,  session  );
                pst.execute();
				rs.close();
				pst.close();
			   }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
		   }
	   }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
	   
	  
	   
        String llev=null ; 
       //initialising the arrayList that will hold gp, credit unit, and gradescore from the db
   String tc;
   String tr;
        ArrayList<String> ar=new ArrayList<>();
        ArrayList<String> artc=new ArrayList<>();
        ArrayList<String> artr=new ArrayList<>();
        ArrayList<String> arNSS=new ArrayList<>();
        
        // getting all the grade point, credit unit and credit earned of the current student
        try{
    
            String sql= "select* from scores where matric=? and semester='"+semester+"'";
           pst=conn.prepareStatement(sql);
           pst.setString(1, matric);
           rs=pst.executeQuery();
          
           while(rs.next()){
              result=rs.getString("gp") ;
              tr=rs.getString("CU");
              tc=rs.getString("CE");
               ar.add(result);
               artc.add(tc);
               artr.add(tr);
           }
           rs.close();
           pst.close();
         }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        } 
      
// adding the number of semester spent and session into deptnss table
		try{
		   String sql= "select* from "+dept+"NSS where matric=? and session=? and semester=? ";
           pst=conn.prepareStatement(sql);
           pst.setString(1, matric);
			pst.setString(2, session);
            pst.setString(3, semester);
           rs=pst.executeQuery();
           if(rs.next()){
		   }else if (!rs.next()){
			   try{
				   String insertScore = "insert into "+dept+"NSS (MATRIC, session,semester )"
						   + " VALUES (?, ?, ?)";

                pst=conn.prepareStatement(insertScore);
                pst.setString(1, matric);
				pst.setString(2, session);
                pst.setString(3, semester);
                pst.execute();
				rs.close();
				pst.close();
			   }catch(Exception e){JOptionPane.showMessageDialog(null,"inserting nss "+ e);}
		   }
	   }catch(Exception e){JOptionPane.showMessageDialog(null,"selecting nss "+ e);}
		
// getting the number of semester spent
        try{
            String sql="select * from "+dept+"NSS where matric=?  ";
            pst=conn.prepareStatement(sql);
             pst.setString(1, matric);
            rs=pst.executeQuery();
            while(rs.next()){
                arNSS.add(rs.getString("semester"));
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "getting nss "+e);
        }
            String[] stud = ar.toArray(new String[ar.size()]);
            String[] stc = artc.toArray(new String[artc.size()]);
            String[] str = artr.toArray(new String[artr.size()]);
            String[] stNSS = arNSS.toArray(new String[arNSS.size()]);
            
            int NSS=arNSS.size();
            
         
            // setting Student level
            if(NSS<=2){
                llev="1";
            }else if(NSS==3 || NSS==4){
                llev="2";
            }else if(NSS==5 || NSS==6){
                llev="3";
            }else if(NSS>=7){
                llev="4";
            }
//inserting level into deptNSS table
			try{
				   String insertScore = " update "+dept+"NSS set level=? where matric=? and session=? and semester=?";

                pst=conn.prepareStatement(insertScore);
                pst.setString(1, llev);
				pst.setString(2, matric);
                pst.setString(3, session);
				pst.setString(4, semester);
                pst.execute();
				rs.close();
				pst.close();
			   }catch(Exception e){JOptionPane.showMessageDialog(null,"inserting nss "+ e);}
			
// inserting number number of semester spent into the department's student db table;
            try{
				String lev="STUDENTS";
            String updateScore = "update '"+dept+""+lev+"' set  nss=? where matric='"+matric+"'";
			pst=conn.prepareStatement(updateScore);
			pst.setInt(1, NSS);
			pst.execute();
			pst.close();
			   } catch(Exception e){JOptionPane.showMessageDialog(null, e);}
			try{
				String updateScore = "update student set  nss=?, level=?, lsession where matric='"+matric+"'";
			pst=conn.prepareStatement(updateScore);
			pst.setInt(1, NSS);
			pst.setString(2, llev);
			pst.setString(3, session);
			pst.execute();
			pst.close();
			   } catch(Exception e){JOptionPane.showMessageDialog(null,"update student level and nss "+ e);}

//inserting scores into the departments' scores table
			 try{
            String selectScore = "select *  from "+dept+"scores where matric='"+matric+"' "
					+ " and session='"+session+"' and course='"+course+"' ";
                pst=conn.prepareStatement(selectScore);
                rs=pst.executeQuery();
				if(rs.next()){
					try{
						String updateScore = "update "+dept+"scores set  TOTAL='"+total+"', "
								+ " GRADE='"+grade+"', CE='"+ce+"', gp='"+gp+"', REMARK='"+remark+"' "
								+ "where matric='"+matric+"' and session='"+session+"' and course='"+course+"'";
						pst=conn.prepareStatement(updateScore);
						pst.execute();
						pst.close();
					} catch(Exception e){JOptionPane.showMessageDialog(null, "update deptscore "+e);}
				}else{
					try{
						String insertScore = "insert into "+dept+"scores (MATRIC, NAME,  LEVEL,"
							+ " COURSE, CU, SEMESTER, TOTAL, GRADE, CE, gp, REMARK, session) "
							+ "VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
						pst=conn.prepareStatement(insertScore);
						pst.setString(1, matric);
						pst.setString(2, name );
						pst.setString(3, llev );
						pst.setString(4, course);
						pst.setString(5, Integer.toString(cu));
						pst.setString(6, semester);
						pst.setString(7, Integer.toString(total) );
						pst.setString(8,   grade );
						pst.setString(9,   Integer.toString(ce) );
						pst.setString(10,  Integer.toString(gp) );
						pst.setString(11,  remark  );
						pst.setString(12,  session  );
						pst.execute();
						rs.close();
						pst.close();
					}catch(Exception e){JOptionPane.showMessageDialog(null, "insert deptscore "+e);}					
				}
                
				rs.close();
				pst.close();
			 }catch(Exception e){JOptionPane.showMessageDialog(null, "check deptscore "+e);}
			
			 String coss=course+" ("+cu+")";
			
 // inserting the score into the departments' level db table
 
 // inserting dummy score into the departments' level db table to confirm whether the course column exists
	try{
		String sql=" insert into '"+dept+""+llev+"' (matric, '"+coss+"') values (?,?)  ";
				
		PreparedStatement pst=conn.prepareStatement(sql);
		pst.setString(2, "2");
		pst.setString(1, "t");
		pst.execute();
		pst.close();
 //confirming whether the matric exist in the dept level table
	    try{
			String sq= "select * from '"+dept+""+llev+"' where matric=? ";
			pst=conn.prepareStatement(sq);
			pst.setString(1, matric);
			rs=pst.executeQuery();
			if(rs.next()){
			   try{
		System.out.println("updating dept level");
            String updateScore = "update '"+dept+""+llev+"' set  nss=?,"
					+ "  '"+course+""+" ("+cu+")"+"'=?, '"+course+""+"GP"+"'=? "
					+ " where matric='"+matric+"'";
			pst=conn.prepareStatement(updateScore);
			pst.setInt(1, NSS);
			pst.setInt(2, total);
			pst.setInt(3, gp);
			pst.execute();
			pst.close();
			   } catch(Exception e){JOptionPane.showMessageDialog(null, "without_Altering updating "+e);}
		   }else if (!rs.next()){
			   
			   try{
				   System.out.println("Inserting into dept level");
				   
				   String insertScore = "insert into '"+dept+""+llev+"' (nss, "
						   + "'"+course+""+" ("+cu+")"+"', '"+course+""+"GP"+"')"
						   + " VALUES (?, ?, ?) where matric='"+matric+"' ";
				pst=conn.prepareStatement(insertScore);
                pst.setInt(1, NSS);
				pst.setInt(2, total);
				pst.setInt(3, gp);
                pst.execute();
				rs.close();
				pst.close();
			   }catch(Exception e){ JOptionPane.showMessageDialog(null,"without_Altering Inserting "+ e); }
		   }
			}catch(Exception e){System.out.println(e);}
	   }catch(Exception e){
		   //JOptionPane.showMessageDialog(null,"dummy insertion "+ e);
	//inserting the course column into the departments' level table because it doesnt exist
				   try{
                    String sq=" alter table '"+dept+""+llev+"' add '"+course+""+" ("+cu+")"+"' ";
                    pst=conn.prepareStatement(sq);
                    pst.executeUpdate();
                    pst.close();
					
                }catch(Exception r){JOptionPane.showMessageDialog(null, "Altering couse "+r);}
				try{
                    String sq=" alter table '"+dept+""+llev+"' add '"+course+""+"GP"+"' ";
                    pst=conn.prepareStatement(sq);
                    pst.executeUpdate();
                    pst.close();
					
                }catch(Exception r){JOptionPane.showMessageDialog(null, "Altering couseGP "+r);}
	//re-inserting the values into the departments' level table
			  try{
			String sq= "select * from '"+dept+""+llev+"' where matric=? ";
			pst=conn.prepareStatement(sq);
			pst.setString(1, matric);
			rs=pst.executeQuery();
			if(rs.next()){
			   try{
		System.out.println("updating dept level");
            String updateScore = "update '"+dept+""+llev+"' set  nss=?,"
					+ "  '"+course+""+" ("+cu+")"+"'=?, '"+course+""+"GP"+"'=? "
					+ " where matric='"+matric+"'";
			pst=conn.prepareStatement(updateScore);
			pst.setInt(1, NSS);
			pst.setInt(2, total);
			pst.setInt(3, gp);
			pst.execute();
			pst.close();
			   } catch(Exception ee){JOptionPane.showMessageDialog(null, "after_Altering updating "+ee);}
		   }else if (!rs.next()){
			   
			   try{
				   System.out.println("Inserting into dept level");
				   
				   String insertScore = "insert into '"+dept+""+llev+"' (nss, "
						   + "'"+course+""+" ("+cu+")"+"', '"+course+""+"GP"+"')"
						   + " VALUES (?, ?, ?) where matric='"+matric+"' ";
				pst=conn.prepareStatement(insertScore);
                pst.setInt(1, NSS);
				pst.setInt(2, total);
				pst.setInt(3, gp);
                pst.execute();
				rs.close();
				pst.close();
			   }catch(Exception ee){ JOptionPane.showMessageDialog(null, "after_Altering Inserting "+ee); }
		   }
			}catch(Exception ee){System.out.println(ee);}
	   }
   //deleting the earlier inserted dummy data
		try{
		String sql=" delete from '"+dept+""+llev+"' where matric =?  ";
		PreparedStatement pst=conn.prepareStatement(sql);
		pst.setString(1, "t");
		pst.execute();
		pst.close();
		}catch(Exception e){System.out.println("deptLevel dummy del "+e);}
	   
            int size = ar.size();
           
            for(int i=0; i<size; i++){
                tGp+=Integer.parseInt(stud[i]);
                tce+=Integer.parseInt(stc[i]);
                tcr+=Integer.parseInt(str[i]);
            }
           
            
            // dividing the total gradepoint by the total credit registered 
            BigDecimal gpee= new BigDecimal(Integer.toString(tGp));
			BigDecimal gpr= new BigDecimal(Integer.toString(tcr));
			double ff = gpee.doubleValue()/gpr.doubleValue();
			//BigDecimal gpar=gpee.divide(gpr);
			BigDecimal gpar=new BigDecimal(Double.toString(ff));
			
			
            
            // rounding the value of the above division to two decimal places
        
         gpar=round(gpar);
		gpa=gpar.toString();
		
           
           
   try{
            String insertScore = "update scores set LEVEL=? where matric=? and session='"+session+"'  ";
                
                pst=conn.prepareStatement(insertScore);
                pst.setString(1, llev);
                pst.setString(2, matric);
                pst.execute();
                            
        rs.close();
        pst.close();
        
        }    
         catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        
           } 
   try{
            String insertScore = "update "+dept+"scores set LEVEL=? where matric=? and session='"+session+"'  ";
                
                pst=conn.prepareStatement(insertScore);
                pst.setString(1, llev);
                pst.setString(2, matric);
                pst.execute();
                            
        rs.close();
        pst.close();
        
        }    
         catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        
           }
   // getting compulsory course that were not registered by the student
   ArrayList <String> rarco= new ArrayList<>();
	rarco.add("REG:");
	int lle=0;
	try{
		lle=Integer.parseInt(llev)+1;
		
	}catch(Exception e){JOptionPane.showMessageDialog(null, "non registered course error");}
	try{
		
		String sql="select code from "+dept+"COURSES where status='"+"Compulsory"+"' and "
				+ "level<'"+lle+"' except select course from "+dept+"scores where matric='"+matric+"' ";
		pst=conn.prepareStatement(sql);
		rs=pst.executeQuery();
		while(rs.next()){
			rarco.add(rs.getString("CODE"));
		}
		pst.close();		
		
   }catch(Exception e){}
	String []raco=rarco.toArray(new String[rarco.size()]);
	String rco=raco[0];	
	try{
		if (raco.length==1){
			rco="";
		}else{
			for (int x=1; x<raco.length; x++){
			 rco+=raco[x]+",";
		}
		}
	}catch(Exception e){JOptionPane.showMessageDialog(null,e);}
	
	ArrayList <String> arco= new ArrayList<>();
	arco.add("RPT:");
	
	try{
		String sql="select course from scores where remark='"+"Fail"+"' "
				+ "and matric='"+matric+"' ";
		pst=conn.prepareStatement(sql);
		rs=pst.executeQuery();
		while(rs.next()){
			arco.add(rs.getString("COURSE"));
		}
		pst.close();		
   }catch(Exception e){}
	
	String []aco=arco.toArray(new String[arco.size()]);
		String cod=aco[0];
		String co=rco+" "; //combining the non-registered courses with the carry-overs
		if (aco.length==1){
			cod="Pass";
		}else{
			for (int x=1; x<aco.length; x++){
			 cod+=aco[x]+",";
		}
		}
		co+=cod;
		
	//inserting tce, tcr, tgp and gpa into the department's table       
         try{
            String sqll = "update '"+dept+"' set TCR1=?, TCE1=?, tgp1=?, gpa1=?  WHERE matric='"+matric+"'";
				pst=conn.prepareStatement(sqll);
                pst.setInt(1, tcr);
                pst.setInt(2, tce);
                pst.setString(4, gpa);
                pst.setInt(3, tGp);
                                    
                pst.execute();            
                }catch(Exception e){JOptionPane.showMessageDialog(null, "GPerror1");}  
            
                   
      // inserting tcr, tce, tgp and gpa into the GP table      
           
      try{
    String sql="select * from gp where matric=?  and session='"+session+"' and semester='"+semester+"' ";
           pst=conn.prepareStatement(sql);
           pst.setString(1, matric);
           rs=pst.executeQuery();
           if(rs.next()){
                try{
            String sqll = "update gp set TCR=?, TCE=?, tgp=?, gpa=?  WHERE matric='"+matric+"'"
					+ " and semester='"+semester+"' and session='"+session+"' ";
				pst=conn.prepareStatement(sqll);
                pst.setInt(1, tcr);
                pst.setInt(2, tce);
                pst.setString(4, gpa);
                pst.setInt(3, tGp);
                                    
                pst.execute();            
                }catch(Exception e){JOptionPane.showMessageDialog(null, "GPerror2");}
               }  
        else if(!rs.next()){
                try{
            String sqll = "insert into gp (MATRIC, NAME, DEPARTMENT,   SEMESTER,  TCR, TCE, TGP,"
					+ " gpa, session) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";

                pst=conn.prepareStatement(sqll);
                pst.setString(1, matric);
                pst.setString(2, name );
                pst.setString(3, dept );
                pst.setString(4, semester);
				pst.setString(9, session);
                pst.setInt(5, tcr);
                pst.setInt(6, tce);
                 pst.setInt(7, tGp);
                pst.setString(8, gpa);
                
                
                pst.execute();
                            
        
        }    
         catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
          
           }
 rs.close();
 pst.close();
      }catch(Exception e){
          
          JOptionPane.showMessageDialog(null, e);

      }
     
      
      //initialising arrayLists that will hold all gpa, tce, tcr and tgp from the db
        ArrayList<Double> arGp=new ArrayList<>();
        ArrayList<String> arctce=new ArrayList<>();
         ArrayList<Double> arctcr=new ArrayList<>();
          ArrayList<Double> arctgp=new ArrayList<>();
       try{
    String sql="select * from gp where matric=? order by session ";
           pst=conn.prepareStatement(sql);
           pst.setString(1, matric);
           rs=pst.executeQuery();
           while(rs.next()){
              arGp.add(rs.getDouble("GPA"));
               arctce.add(rs.getString("TCE"));
               arctcr.add(rs.getDouble("TCR"));
               arctgp.add(rs.getDouble("TGP"));
                             
           }
       }catch(Exception e){
           
       }
        
        Double[] stGp = arctgp.toArray(new Double[arctgp.size()]);
         int stGpSize = arctgp.size();
		 Double[] st = arctcr.toArray(new Double[arctcr.size()]);
         int stSize = arctcr.size();
         
// overriding the value of stGpSize to NSS
		stGpSize=NSS;
		 
		
		
         if(stGpSize==1){
           level1GP=stGp[0].toString();
         }
         else if(stGpSize==2){
        
         double f1=stGp[0];
         double f=stGp[1];
         double fsum=f1+f;
         BigDecimal lev1=new BigDecimal(Double.toString(fsum/(st[0]+st[1])));
		 lev1=round(lev1);
         level1GP=lev1.toString();
		 System.out.println(level1GP);
         }
         
         if(stGpSize==3){
            double fi=stGp[2];
             level2GP=Double.toString(fi); 
         }
         else  if(stGpSize==4){
         double h=stGp[2];
         double h1=stGp[3];
         double hsum=h1+h;
         BigDecimal lev1=new BigDecimal(Double.toString(hsum/(st[2]+st[3])));
		 lev1=round(lev1);
         level2GP=lev1.toString();
         }
         
         if(stGpSize==5){
            // double fi=stGp[4];
             level3GP=stGp[4].toString();
         }
          else  if(stGpSize==6){
                
        double j=stGp[4];
        double j1=stGp[5];
        double jsum=j1+j;
        BigDecimal lev1=new BigDecimal(Double.toString(jsum/(st[4]+st[5])));
		 lev1=round(lev1);
         level3GP=lev1.toString();
                
         }

         if(stGpSize==7){
             //double fi=stGp[6];
             level4GP=stGp[6].toString();
         }
         else  if(stGpSize==8){
       try{
        double k=stGp[6];
         double k1=stGp[7];
         double ksum=k1+k;
         BigDecimal lev1=new BigDecimal(Double.toString(ksum/(st[6]+st[7])));
		 lev1=round(lev1);
         level4GP=lev1.toString();
         
         }catch(Exception e){}
        
  } 
         
         String[] stTce = arctce.toArray(new String[arctce.size()]);
         int stTceSize = arctce.size();
         
         Double[] stTcr = arctcr.toArray(new Double[arctcr.size()]);
         int stTcrSize = arctcr.size();
         
         Double [] stTgp = arctgp.toArray(new Double[arctgp.size()]);
         int stTgpSize = arctgp.size();
         
         int ctce = 0;
         int ctcr = 0;
         double ctgp= 0;
          double l = 0;
         
         try{
             
         for(int i=0; i<stTceSize; i++){
             ctce += Integer.parseInt(stTce[i]);
         }
         for(int i=0; i<stTcrSize; i++){
             ctcr += stTcr[i];
         }
         
         for(int i=0; i<stTgpSize; i++){
             ctgp += stTgp[i];
         }
         
         }catch(Exception e){
            JOptionPane.showMessageDialog(null, "cgpa addition error"); 
         }
		 
//getting the cgpa by rounding it to two deecimal places
        double cgpe=ctgp/ctcr;
        BigDecimal cgps=new BigDecimal(Double.toString(cgpe));
		 cgps=round(cgps);
        String cgpa=cgps.toString();
		
		double cdd=cgps.doubleValue();
 // generating class of degree        
        try{
			 if(cdd>4.49){
			 cod="FIRST	CLASS";
		 }else if(cdd>3.49 && cdd<4.50){
			 cod="SECOND CLASS UPPER";
		 }else if(cdd>2.49 && cdd<3.50){
			 cod="SECOND CLASS LOWER";
		 }else if(cdd>1.49 && cdd<2.50){
			 cod="THIRD CLASS";
		 }else if(cdd<1.50){
			 cod="PASS DEGREE";
		 }
		}catch(Exception e){ JOptionPane.showMessageDialog(null, "summary computation error");}
		
		
         
		 try{
			String s="summary";
            String sqll = "update '"+dept+""+s+"' set remark=?, cod=? WHERE matric='"+matric+"' ";
			pst=conn.prepareStatement(sqll);
            pst.setString(1, co);
            pst.setString(2, cod );
			pst.execute();
		 }catch(Exception e){JOptionPane.showMessageDialog(null, "summary error");}  
		 
       // inserting values INTO the cgpa table  
       
       if (stGpSize>=1 && stGpSize<=2){
		  
		   //inserting tce, tcr, tgp and gpa into the department's table       
         try{
            String sqll = "update '"+dept+"' set TCR1=?, TCE1=?, tgp1=?, gpa1=? "
					+ " WHERE matric='"+matric+"' ";
				pst=conn.prepareStatement(sqll);
                pst.setInt(1, tcr);
                pst.setInt(2, tce);
                pst.setString(4, gpa);
                pst.setInt(3, tGp);
                                    
                pst.execute();            
                }catch(Exception e){JOptionPane.showMessageDialog(null, "GPerror11");} 
		 
           try{
             String sql="select * from cgpa where matric=? ";
           pst=conn.prepareStatement(sql);
            pst.setString(1, matric);
           rs=pst.executeQuery();
           if(rs.next()){
                try{
             String sqlu="update cgpa set  MATRIC=?, CTCR=?, CTCE=?, ctgp=?, CGPA=?"
					 + "   WHERE matric='"+matric+"' ";
                pst=conn.prepareStatement(sqlu);
                
                pst.setString(1, matric);
                pst.setInt(2, ctcr);
                pst.setInt(3, ctce);
                pst.setDouble(4, ctgp);
                pst.setString(5, cgpa);
                 pst.execute();}catch(Exception e){JOptionPane.showMessageDialog(null, "cgpaerror");}
                
				try{
             String sqlu="update level1 set  MATRIC=?, name=?,TCR=?, TCE=?,"
					 + " tgp=?, GPA=?  WHERE MATRIC='"+matric+"' ";
                pst=conn.prepareStatement(sqlu);
                pst.setString(1, matric);
                pst.setString(2, name );
                pst.setInt(3, ctcr);
                pst.setInt(4, ctce);
                pst.setDouble(5, ctgp);
                pst.setString(6, level1GP);
                pst.execute();
                                     
                }catch(Exception e){JOptionPane.showMessageDialog(null, "level1 erro1");}
		   }else if(!rs.next()){
                try{
             String sqli="insert into cgpa  (MATRIC, CTCR, CTCE, CTGP, CGPA)  VALUES"
					 + " ( ?, ?, ?, ?, ?) ";
                pst=conn.prepareStatement(sqli);
                pst.setString(1, matric);
                pst.setInt(2, ctcr);
                pst.setInt(3, ctce);
                pst.setDouble(4, ctgp);
                pst.setString(5, cgpa);
                pst.execute();
				}catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                try{
             String sqli="insert into level1  (matric, name, department,"
					 + " program, tcr, tce, tgp, gpa ) VALUES (?, ?, ?, ?, "
					 + "?, ?, ?, ?)";
                pst=conn.prepareStatement(sqli);
                pst.setString(1, matric);
                pst.setString(2, name );
                pst.setString(3, dept);
                //pst.setString(3, prog);
                pst.setInt(5, ctcr);
                pst.setInt(6, ctce);
                pst.setDouble(7, ctgp);
                pst.setString(8, cgpa );
// the reason why i used cgpa value instead of level1GP is because level1 table 'cgpa column' value would not change after the student moved to the next level
                
				pst.execute();
				
        }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
           }
         }catch(Exception e){JOptionPane.showMessageDialog(null, "3");}
       }else if (stGpSize>=3 && stGpSize<=4){
		   //inserting tce, tcr, tgp and gpa into the department's table       
         try{
            String sqll = "update '"+dept+"' set TCR2=?, TCE2=?, tgp2=?, gpa2=?  "
					+ "WHERE matric='"+matric+"' ";
				pst=conn.prepareStatement(sqll);
                pst.setInt(1, tcr);
                pst.setInt(2, tce);
                pst.setString(4, gpa);
                pst.setInt(3, tGp);
                                    
                pst.execute();            
                }catch(Exception e){
					String c = "TCR2";
					String cc = "TCE2";
					String ccc = "TGP2";
					String cccc = "GPA2";
					try{
						String sql="alter table '"+dept+"' add '"+c+"' ";
						pst=conn.prepareStatement(sql);
						pst.executeUpdate();
					}catch(Exception r){JOptionPane.showMessageDialog(null, "error in "
							+ "adding/altering tcr, tce, tgp, and gpa to the department's table");}
					try{
						String sql="alter table '"+dept+"' add '"+cc+"' ";
						pst=conn.prepareStatement(sql);
						pst.executeUpdate();
					}catch(Exception r){JOptionPane.showMessageDialog(null, "error in "
							+ "adding/altering tcr, tce, tgp, and gpa to the department's table");}
					try{
						String sql="alter table '"+dept+"' add '"+ccc+"' ";
						pst=conn.prepareStatement(sql);
						pst.executeUpdate();
					}catch(Exception r){JOptionPane.showMessageDialog(null, "error in "
							+ "adding/altering tcr, tce, tgp, and gpa to the department's table");}
					try{
						String sql="alter table '"+dept+"' add '"+cccc+"' ";
						pst=conn.prepareStatement(sql);
						pst.executeUpdate();
					}catch(Exception r){JOptionPane.showMessageDialog(null, "error in "
							+ "adding/altering tcr, tce, tgp, and gpa to the department's table");}
					try{
				String sqll = "update '"+dept+"' set TCR2=?, TCE2=?, tgp2=?, gpa2=?  "
					+ "WHERE matric='"+matric+"' ";
				pst=conn.prepareStatement(sqll);
                pst.setInt(1, tcr);
                pst.setInt(2, tce);
                pst.setString(4, gpa);
                pst.setInt(3, tGp);
                                    
                pst.execute();            
                }catch(Exception rr){JOptionPane.showMessageDialog(null, "dept input error");}
				} 
				
		 try{
             String sql="select * from level2 where matric=? ";
           pst=conn.prepareStatement(sql);
            pst.setString(1, matric);
           rs=pst.executeQuery();
           if(rs.next()){
				try{
             String sqlu="update level2 set  MATRIC=?, name=?,TCR=?, TCE=?,"
					 + " tgp=?, GPA=?  WHERE MATRIC='"+matric+"' ";
                pst=conn.prepareStatement(sqlu);
                pst.setString(1, matric);
                pst.setString(2, name );
                pst.setInt(3, ctcr);
                pst.setInt(4, ctce);
                pst.setDouble(5, ctgp);
                pst.setString(6, cgpa);
                pst.execute();
                                     
                }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
		   }else if(!rs.next()){
                
				try{
             String sqli="insert into level2  (matric, name, department, program, "
					 + "tcr, tce, tgp, gpa ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                pst=conn.prepareStatement(sqli);
                pst.setString(1, matric);
                pst.setString(2, name );
                pst.setString(3, dept);
                //pst.setString(3, prog);
                pst.setInt(5, ctcr);
                pst.setInt(6, ctce);
                pst.setDouble(7, ctgp);
                pst.setString(8, cgpa);
                pst.execute();
              
        }    
         catch(Exception e){JOptionPane.showMessageDialog(null, e);}
           }
         }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
		 
           try{
             String sql="select * from cgpa where matric=? ";
           pst=conn.prepareStatement(sql);
            pst.setString(1, matric);
           rs=pst.executeQuery();
           if(rs.next()){
                try{
             String sqlu="update cgpa set  MATRIC=?, CTCR=?, CTCE=?, ctgp=?, CGPA=?"
					 + "   WHERE matric='"+matric+"' ";
                pst=conn.prepareStatement(sqlu);
                
                pst.setString(1, matric);
                pst.setInt(2, ctcr);
                pst.setInt(3, ctce);
                pst.setDouble(4, ctgp);
                pst.setString(5, cgpa);
                 pst.execute();}catch(Exception e){JOptionPane.showMessageDialog(null, "cgpa error");}
                
				
		   }else if(!rs.next()){
                try{
             String sqli="insert into cgpa  (MATRIC, CTCR, CTCE, CTGP, CGPA)  VALUES"
					 + " ( ?, ?, ?, ?, ?) ";
                pst=conn.prepareStatement(sqli);
                pst.setString(1, matric);
                pst.setInt(2, ctcr);
                pst.setInt(3, ctce);
                pst.setDouble(4, ctgp);
                pst.setString(5, cgpa);
                pst.execute();
				}catch(Exception e){JOptionPane.showMessageDialog(null, e);}
				
				
           }
         }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
       }
       else if (stGpSize>=5 && stGpSize<=6){
		   
		   //inserting tce, tcr, tgp and gpa into the department's table       
         try{
            String sqll = "update '"+dept+"' set TCR3=?, TCE3=?, tgp3=?, gpa3=?  "
					+ "WHERE matric='"+matric+"' ";
				pst=conn.prepareStatement(sqll);
                pst.setInt(1, tcr);
                pst.setInt(2, tce);
                pst.setString(4, gpa);
                pst.setInt(3, tGp);
                                    
                pst.execute();            
                }catch(Exception e){
					String c = "TCR3";
					String cc = "TCE3";
					String ccc = "TGP3";
					String cccc = "GPA3";
					try{
					
						String sql="alter table '"+dept+"' add '"+c+"' ";
						pst=conn.prepareStatement(sql);
						pst.executeUpdate();
					}catch(Exception r){JOptionPane.showMessageDialog(null, "error in "
							+ "adding/altering tcr, tce, tgp, and gpa to the department's table");}
					try{
						String sql="alter table '"+dept+"' add '"+cc+"' ";
						pst=conn.prepareStatement(sql);
						pst.executeUpdate();
					}catch(Exception r){JOptionPane.showMessageDialog(null, "error in "
							+ "adding/altering tcr, tce, tgp, and gpa to the department's table");}
					try{
						String sql="alter table '"+dept+"' add '"+ccc+"' ";
						pst=conn.prepareStatement(sql);
						pst.executeUpdate();
					}catch(Exception r){JOptionPane.showMessageDialog(null, "error in "
							+ "adding/altering tcr, tce, tgp, and gpa to the department's table");}
					try{
						String sql="alter table '"+dept+"' add '"+cccc+"' ";
						pst=conn.prepareStatement(sql);
						pst.executeUpdate();
					}catch(Exception r){JOptionPane.showMessageDialog(null, "error in "
							+ "adding/altering tcr, tce, tgp, and gpa to the department's table");}
					
					try{
				String sqll = "update '"+dept+"' set TCR3=?, TCE3=?, tgp3=?, gpa3=?  "
					+ "WHERE matric='"+matric+"' ";
				pst=conn.prepareStatement(sqll);
                pst.setInt(1, tcr);
                pst.setInt(2, tce);
                pst.setString(4, gpa);
                pst.setInt(3, tGp);
                                    
                pst.execute();            
                }catch(Exception rr){JOptionPane.showMessageDialog(null, rr);}
				} 
		 try{
             String sql="select * from level3 where matric=? ";
           pst=conn.prepareStatement(sql);
            pst.setString(1, matric);
           rs=pst.executeQuery();
           if(rs.next()){
				try{
             String sqlu="update level3 set  MATRIC=?, name=?,TCR=?, TCE=?,"
					 + " tgp=?, GPA=?  WHERE MATRIC='"+matric+"' ";
                pst=conn.prepareStatement(sqlu);
                pst.setString(1, matric);
                pst.setString(2, name );
                pst.setInt(3, ctcr);
                pst.setInt(4, ctce);
                pst.setDouble(5, ctgp);
                pst.setString(6, cgpa);
                pst.execute();
                                     
                }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
		   }else if(!rs.next()){
                
				try{
             String sqli="insert into level3  (matric, name, department, program, "
					 + "tcr, tce, tgp, gpa ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                pst=conn.prepareStatement(sqli);
                pst.setString(1, matric);
                pst.setString(2, name );
                pst.setString(3, dept);
                //pst.setString(3, prog);
                pst.setInt(5, ctcr);
                pst.setInt(6, ctce);
                pst.setDouble(7, ctgp);
                pst.setString(8, cgpa);
                pst.execute();
              
        }    
         catch(Exception e){JOptionPane.showMessageDialog(null, e);}
           }
         }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
		 
          try{
             String sql="select * from cgpa where matric=? ";
           pst=conn.prepareStatement(sql);
            pst.setString(1, matric);
           rs=pst.executeQuery();
           if(rs.next()){
                try{
             String sqlu="update cgpa set  MATRIC=?, CTCR=?, CTCE=?, ctgp=?, CGPA=?"
					 + "   WHERE matric='"+matric+"' ";
                pst=conn.prepareStatement(sqlu);
                
                pst.setString(1, matric);
                pst.setInt(2, ctcr);
                pst.setInt(3, ctce);
                pst.setDouble(4, ctgp);
                pst.setString(5, cgpa);
                 pst.execute();}catch(Exception e){JOptionPane.showMessageDialog(null, "cgpaerror");}
                
		   }else if(!rs.next()){
                try{
             String sqli="insert into cgpa  (MATRIC, CTCR, CTCE, CTGP, CGPA)  VALUES"
					 + " ( ?, ?, ?, ?, ?) ";
                pst=conn.prepareStatement(sqli);
                pst.setString(1, matric);
                pst.setInt(2, ctcr);
                pst.setInt(3, ctce);
                pst.setDouble(4, ctgp);
                pst.setString(5, cgpa);
                pst.execute();
				}catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                
           }
         }catch(Exception e){JOptionPane.showMessageDialog(null, "3");}
       }
       else if (stGpSize>=7 && stGpSize<=8){
		    
		   //inserting tce, tcr, tgp and gpa into the department's table       
         try{
            String sqll = "update '"+dept+"' set TCR4=?, TCE4=?, tgp4=?, gpa4=?  "
					+ "WHERE matric='"+matric+"'";
				pst=conn.prepareStatement(sqll);
                pst.setInt(1, tcr);
                pst.setInt(2, tce);
                pst.setString(4, gpa);
                pst.setInt(3, tGp);
                                    
                pst.execute();            
                }catch(Exception e){
					String c = "TCR4";
					String cc = "TCE4";
					String ccc = "TGP4";
					String cccc = "GPA4";
					try{
					
						String sql="alter table '"+dept+"' add '"+c+"' ";
						pst=conn.prepareStatement(sql);
						pst.executeUpdate();
					}catch(Exception r){JOptionPane.showMessageDialog(null, "error in "
							+ "adding/altering tcr, tce, tgp, and gpa to the department's table");}
					try{
						String sql="alter table '"+dept+"' add '"+cc+"' ";
						pst=conn.prepareStatement(sql);
						pst.executeUpdate();
					}catch(Exception r){JOptionPane.showMessageDialog(null, "error in "
							+ "adding/altering tcr, tce, tgp, and gpa to the department's table");}
					try{
						String sql="alter table '"+dept+"' add '"+ccc+"' ";
						pst=conn.prepareStatement(sql);
						pst.executeUpdate();
					}catch(Exception r){JOptionPane.showMessageDialog(null, "error in "
							+ "adding/altering tcr, tce, tgp, and gpa to the department's table");}
					try{
						String sql="alter table '"+dept+"' add '"+cccc+"' ";
						pst=conn.prepareStatement(sql);
						pst.executeUpdate();
					}catch(Exception r){JOptionPane.showMessageDialog(null, "error in "
							+ "adding/altering tcr, tce, tgp, and gpa to the department's table");}
					
					try{
				String sqll = "update '"+dept+"' set TCR4=?, TCE4=?, tgp4=?, gpa4=?  "
					+ "WHERE matric='"+matric+"' ";
				pst=conn.prepareStatement(sqll);
                pst.setInt(1, tcr);
                pst.setInt(2, tce);
                pst.setString(4, gpa);
                pst.setInt(3, tGp);
                                    
                pst.execute();            
                }catch(Exception rr){JOptionPane.showMessageDialog(null, rr);}
				} 
				
				try{
             String sql="select * from level4 where matric=? ";
           pst=conn.prepareStatement(sql);
            pst.setString(1, matric);
           rs=pst.executeQuery();
           if(rs.next()){
				try{
             String sqlu="update level4 set  MATRIC=?, name=?,TCR=?, TCE=?,"
					 + " tgp=?, GPA=?  WHERE MATRIC='"+matric+"' ";
                pst=conn.prepareStatement(sqlu);
                pst.setString(1, matric);
                pst.setString(2, name );
                pst.setInt(3, ctcr);
                pst.setInt(4, ctce);
                pst.setDouble(5, ctgp);
                pst.setString(6, cgpa);
                pst.execute();
                                     
                }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
		   }else if(!rs.next()){
                
				try{
             String sqli="insert into level4  (matric, name, department, program, "
					 + "tcr, tce, tgp, gpa ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                pst=conn.prepareStatement(sqli);
                pst.setString(1, matric);
                pst.setString(2, name );
                pst.setString(3, dept);
                //pst.setString(3, prog);
                pst.setInt(5, ctcr);
                pst.setInt(6, ctce);
                pst.setDouble(7, ctgp);
                pst.setString(8, cgpa);
                pst.execute();
              
        }    
         catch(Exception e){JOptionPane.showMessageDialog(null, e);}
           }
         }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
		 
         try{
             String sql="select * from cgpa where matric=? ";
           pst=conn.prepareStatement(sql);
            pst.setString(1, matric);
           rs=pst.executeQuery();
           if(rs.next()){
                try{
             String sqlu="update cgpa set  MATRIC=?, CTCR=?, CTCE=?, ctgp=?, CGPA=?"
					 + "   WHERE matric='"+matric+"' ";
                pst=conn.prepareStatement(sqlu);
                
                pst.setString(1, matric);
                pst.setInt(2, ctcr);
                pst.setInt(3, ctce);
                pst.setDouble(4, ctgp);
                pst.setString(5, cgpa);
                 pst.execute();}catch(Exception e){JOptionPane.showMessageDialog(null, "cgpaerror");}
                 
		   }else if(!rs.next()){
                try{
             String sqli="insert into cgpa  (MATRIC, CTCR, CTCE, CTGP, CGPA)  VALUES"
					 + " ( ?, ?, ?, ?, ?) ";
                pst=conn.prepareStatement(sqli);
                pst.setString(1, matric);
                pst.setInt(2, ctcr);
                pst.setInt(3, ctce);
                pst.setDouble(4, ctgp);
                pst.setString(5, cgpa);
                pst.execute();
				}catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                 
           }
         }catch(Exception e){JOptionPane.showMessageDialog(null, "3");}
       }
   }


static BigDecimal round(BigDecimal d){
return d.setScale(2, RoundingMode.HALF_UP);
}

    
public void pdf(){
         String header="First Header";
        String header1="Second Header in a New Paragraph";
        chooser.setDialogTitle("Save To");
        Document doc;

        if(chooser.showSaveDialog(this)==JFileChooser.APPROVE_OPTION){
        //pdf creation
        try {
                doc = new Document(PageSize.A4.rotate() );
                PdfWriter.getInstance(doc, new FileOutputStream(new File(chooser.getSelectedFile().getAbsolutePath()+".pdf")));
                doc.open();
                Paragraph rHead = new Paragraph(header1, new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD));
                rHead.setAlignment(Element.ALIGN_CENTER);
                Paragraph rHead1=new Paragraph(header, new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD));
                rHead1.setAlignment(Element.ALIGN_CENTER);
                doc.add(rHead);
                doc.add(rHead1);
                doc.add(new Paragraph("                               "));
               
                PdfPTable pdfTable = new PdfPTable(resultTable.getColumnCount());
  
                  // pdfTable.setHeaderRows(1);
                int n=resultTable.getColumnCount();  
                int[]x =new int[n];
                int y=3;
                int o=1;
                for (int j = 0; j <n ; j++){
                x[j]=y;
                
                //setting some selected column width
                x[n-5]=o;
                x[n-4]=o;
                x[n-3]=o;
                x[n-2]=o;
                x[n-6]=o;
                x[n-7]=o;
                x[n-9]=o;
                x[n-11]=o;
                x[n-1]=2;
                
               pdfTable.setWidths(x);
                
                PdfPCell cell = new PdfPCell(new Paragraph(resultTable.getColumnName(j), new Font(Font.FontFamily.TIMES_ROMAN, 9)));
                cell.setBackgroundColor(new GrayColor(0.7f));
                         
                pdfTable.addCell(cell);
 
                }
            
         for (int i = 0; i < resultTable.getRowCount(); i++) {
            for (int j = 0; j < resultTable.getColumnCount(); j++) {
                pdfTable.addCell( getCellValue(i,j).toString());
                
                
                //pdfTable.addCell(resultTable.getModel().getValueAt(i, j).toString());
            }
        }
         
        doc.add(pdfTable);
    doc.close();
            JOptionPane.showMessageDialog(null, "Report Saved...");
    
        } catch (DocumentException ex) {
            JOptionPane.showMessageDialog(null, ex);

        }   catch (FileNotFoundException ex) {
                Logger.getLogger(MainCal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            System.out.println("No Selection");
        }
        
    }
    
public void excel(){
    
chooser.setDialogTitle("Specify your Saving Location");
if(chooser.showSaveDialog(this)==JFileChooser.APPROVE_OPTION){
    try{
        Workbook wb = new HSSFWorkbook();
    CreationHelper createhelper = wb.getCreationHelper();
    Sheet sheet = wb.createSheet("new sheet");
    Row row = null;
    Cell cell = null;
    try{ 
       for (int j = 0; j < resultTable.getColumnCount(); j++){
		   cell.setCellValue(resultTable.getColumnName(j));
		  
	   }
	}catch(Exception e){JOptionPane.showMessageDialog(null, e);}
    for (int i=0;i<resultTable.getRowCount();i++) {
        row = sheet.createRow(i);
        for (int j=0;j<resultTable.getColumnCount();j++) {
            cell = row.createCell(j);
            cell.setCellValue( getCellValue(i,j).toString());
        }
    }
     FileOutputStream out = new FileOutputStream(new File ( chooser.getSelectedFile().getAbsolutePath()+".xls"));
    wb.write(out);
    out.close();
	JOptionPane.showMessageDialog(null, "Saved...");
        }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
        }     

    }
   
private void word(String header1, String header2, String header3, String header4,String header5, int cCount, int rCount){
        
         XWPFParagraph paragraph1= d.createParagraph();
         XWPFParagraph paragraph2= d.createParagraph();
         XWPFParagraph paragraph3= d.createParagraph();
         XWPFParagraph paragraph4= d.createParagraph();
		 XWPFParagraph paragraph5= d.createParagraph();
         
    paragraph1.setAlignment(ParagraphAlignment.CENTER);
    paragraph2.setAlignment(ParagraphAlignment.CENTER);
    paragraph3.setAlignment(ParagraphAlignment.CENTER);
    paragraph4.setAlignment(ParagraphAlignment.CENTER);
	paragraph5.setAlignment(ParagraphAlignment.LEFT);
    
    XWPFRun run= paragraph1.createRun();
    XWPFRun run1= paragraph2.createRun();
    XWPFRun run2= paragraph3.createRun();
    XWPFRun run3= paragraph4.createRun();
    XWPFRun run4= paragraph5.createRun();
    XWPFRun run5= paragraph1.createRun();
    XWPFRun run6= paragraph1.createRun();
    XWPFRun run7= paragraph1.createRun();
    
    run.setText(header1);
    run.setFontSize(18);
    run1.setText(header2);
    run1.setFontSize(16);
    run2.setText(header3);
    run2.setFontSize(14);
    run3.setText(header4);
     run3.setFontSize(12);
	 run4.setText(header5);
     run4.setFontSize(12);
    // Creating Table  
	XWPFTable tab = d.createTable();
    tab.setTableAlignment(TableRowAlign.CENTER);
	XWPFTableRow row = tab.getRow(0); // First row
                 
    // Columns  
	cCount= resultTable.getColumnCount();
	row.getCell(0).setText("S/N");
                  //row.getCell(1).setText(resultTable.getColumnName(0));
				  XWPFTableCell [] c = new XWPFTableCell[cCount];
				  try{
					  for(int i=0; i<cCount; i++){
                  c[i] = row.addNewTableCell();
                  c[i].setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
                  c[i].setText(resultTable.getColumnName(i));
              }
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
                  rCount=resultTable.getRowCount();
               XWPFTableRow[] rows =new XWPFTableRow[rCount];
              for(int i=0;i<rows.length;i++){
                rows[i]=tab.createRow();
                rows[i].getCell(0).setText(Integer.toString(i+1));
                for(int j=0; j<c.length ;j++){
					rows[i].getCell(j+1).setText(getCellValue(i,j).toString());
                }
              }
        tab.setWidth("100%");
    }
private void word1(){
        
         XWPFParagraph paragraph1= d.createParagraph();
         XWPFParagraph paragraph2= d.createParagraph();
         XWPFParagraph paragraph3= d.createParagraph();
         XWPFParagraph paragraph4= d.createParagraph();
		 XWPFParagraph paragraph5= d.createParagraph();
         
    paragraph1.setAlignment(ParagraphAlignment.CENTER);
    paragraph2.setAlignment(ParagraphAlignment.CENTER);
    paragraph3.setAlignment(ParagraphAlignment.CENTER);
    paragraph4.setAlignment(ParagraphAlignment.CENTER);
	paragraph5.setAlignment(ParagraphAlignment.LEFT);
    
    XWPFRun run= paragraph1.createRun();
    XWPFRun run1= paragraph2.createRun();
    XWPFRun run2= paragraph3.createRun();
    XWPFRun run3= paragraph4.createRun();
    XWPFRun run4= paragraph5.createRun();
    XWPFRun run5= paragraph1.createRun();
    XWPFRun run6= paragraph1.createRun();
    XWPFRun run7= paragraph1.createRun();
    
    run.setText(header1);
    run.setFontSize(18);
    run1.setText(header2);
    run1.setFontSize(16);
    run2.setText(header3);
    run2.setFontSize(14);
    run3.setText(header4);
     run3.setFontSize(12);
	 run4.setText(header5);
     run4.setFontSize(12);
    // Creating Table  
	XWPFTable tab = d.createTable();
	XWPFTable tab1 = d.createTable();
    tab.setTableAlignment(TableRowAlign.CENTER);
	XWPFTableRow row = tab.getRow(0); // First row
                 
    // Columns  
	cCount= reportTable.getColumnCount();
	row.getCell(0).setText("S/N");
                  //row.getCell(1).setText(resultTable.getColumnName(0));
				  XWPFTableCell [] c = new XWPFTableCell[cCount];
				  try{
					  for(int i=0; i<cCount; i++){
                  c[i] = row.addNewTableCell();
                  c[i].setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
                  c[i].setText(reportTable.getColumnName(i));
              }
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
                  rCount=reportTable.getRowCount();
               XWPFTableRow[] rows =new XWPFTableRow[rCount];
              for(int i=0;i<rows.length;i++){
                rows[i]=tab.createRow();
                rows[i].getCell(0).setText(Integer.toString(i+1));
                for(int j=0; j<c.length ;j++){
					rows[i].getCell(j+1).setText(getCellValuee(i,j).toString());
                }
              }
        tab.setWidth("100%");
    }
private void word2(){
        
         XWPFParagraph paragraph1= d.createParagraph();
         XWPFParagraph paragraph2= d.createParagraph();
         XWPFParagraph paragraph3= d.createParagraph();
         XWPFParagraph paragraph4= d.createParagraph();
		 XWPFParagraph paragraph5= d.createParagraph();
         
    paragraph1.setAlignment(ParagraphAlignment.CENTER);
    paragraph2.setAlignment(ParagraphAlignment.CENTER);
    paragraph3.setAlignment(ParagraphAlignment.CENTER);
    paragraph4.setAlignment(ParagraphAlignment.CENTER);
	paragraph5.setAlignment(ParagraphAlignment.LEFT);
    
    XWPFRun run= paragraph1.createRun();
    XWPFRun run1= paragraph2.createRun();
    XWPFRun run2= paragraph3.createRun();
    XWPFRun run3= paragraph4.createRun();
    XWPFRun run4= paragraph5.createRun();
    XWPFRun run5= paragraph1.createRun();
    XWPFRun run6= paragraph1.createRun();
    XWPFRun run7= paragraph1.createRun();
    
    run.setText(header1);
    run.setFontSize(18);
    run1.setText(header2);
    run1.setFontSize(16);
    run2.setText(header3);
    run2.setFontSize(14);
    run3.setText(header4);
     run3.setFontSize(12);
	 run4.setText(header5);
     run4.setFontSize(12);
    // Creating Table  
	XWPFTable tab = d.createTable();
    tab.setTableAlignment(TableRowAlign.CENTER);
	XWPFTableRow row = tab.getRow(0); // First row
                 
    // Columns  
	cCount= reportTable.getColumnCount();
	row.getCell(0).setText("S/N");
                  //row.getCell(1).setText(resultTable.getColumnName(0));
				  XWPFTableCell [] c = new XWPFTableCell[cCount];
				  try{
					  for(int i=0; i<cCount; i++){
                  c[i] = row.addNewTableCell();
                  c[i].setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
                  c[i].setText(reportTable.getColumnName(i));
              }
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
                  rCount=reportTable.getRowCount();
               XWPFTableRow[] rows =new XWPFTableRow[rCount];
              for(int i=0;i<rows.length;i++){
                rows[i]=tab.createRow();
                rows[i].getCell(0).setText(Integer.toString(i+1));
                for(int j=0; j<c.length ;j++){
					rows[i].getCell(j+1).setText(getCellValuee(i,j).toString());
                }
              }
        tab.setWidth("100%");
    }
private void word3(){
        
         XWPFParagraph paragraph1= d.createParagraph();
         XWPFParagraph paragraph2= d.createParagraph();
         XWPFParagraph paragraph3= d.createParagraph();
         XWPFParagraph paragraph4= d.createParagraph();
		 XWPFParagraph paragraph5= d.createParagraph();
         
    paragraph1.setAlignment(ParagraphAlignment.CENTER);
    paragraph2.setAlignment(ParagraphAlignment.CENTER);
    paragraph3.setAlignment(ParagraphAlignment.CENTER);
    paragraph4.setAlignment(ParagraphAlignment.CENTER);
	paragraph5.setAlignment(ParagraphAlignment.LEFT);
    
    XWPFRun run= paragraph1.createRun();
    XWPFRun run1= paragraph2.createRun();
    XWPFRun run2= paragraph3.createRun();
    XWPFRun run3= paragraph4.createRun();
    XWPFRun run4= paragraph5.createRun();
    XWPFRun run5= paragraph1.createRun();
    XWPFRun run6= paragraph1.createRun();
    XWPFRun run7= paragraph1.createRun();
    
    run.setText(header1);
    run.setFontSize(18);
    run1.setText(header2);
    run1.setFontSize(16);
    run2.setText(header3);
    run2.setFontSize(14);
    run3.setText(header4);
     run3.setFontSize(12);
	 run4.setText(header5);
     run4.setFontSize(12);
    // Creating Table  
	XWPFTable tab = d.createTable();
    tab.setTableAlignment(TableRowAlign.CENTER);
	XWPFTableRow row = tab.getRow(0); // First row
                 
    // Columns  
	cCount= reportTable.getColumnCount();
	row.getCell(0).setText("S/N");
                  //row.getCell(1).setText(resultTable.getColumnName(0));
				  XWPFTableCell [] c = new XWPFTableCell[cCount];
				  try{
					  for(int i=0; i<cCount; i++){
                  c[i] = row.addNewTableCell();
                  c[i].setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
                  c[i].setText(reportTable.getColumnName(i));
              }
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
                  rCount=reportTable.getRowCount();
               XWPFTableRow[] rows =new XWPFTableRow[rCount];
              for(int i=0;i<rows.length;i++){
                rows[i]=tab.createRow();
                rows[i].getCell(0).setText(Integer.toString(i+1));
                for(int j=0; j<c.length ;j++){
					rows[i].getCell(j+1).setText(getCellValuee(i,j).toString());
                }
              }
        tab.setWidth("100%");
    }
private void rSumWord(){
        
         XWPFParagraph paragraph1= d.createParagraph();
         XWPFParagraph paragraph2= d.createParagraph();
         XWPFParagraph paragraph3= d.createParagraph();
         XWPFParagraph paragraph4= d.createParagraph();
		 XWPFParagraph paragraph5= d.createParagraph();
         
    paragraph1.setAlignment(ParagraphAlignment.CENTER);
    paragraph2.setAlignment(ParagraphAlignment.CENTER);
    paragraph3.setAlignment(ParagraphAlignment.CENTER);
    paragraph4.setAlignment(ParagraphAlignment.CENTER);
	paragraph5.setAlignment(ParagraphAlignment.LEFT);
    
   
    XWPFRun run3= paragraph4.createRun();
    XWPFRun run4= paragraph5.createRun();
    XWPFRun run5= paragraph1.createRun();
    XWPFRun run6= paragraph1.createRun();
    XWPFRun run7= paragraph1.createRun();
    
    
    run3.setText("");
     run3.setFontSize(12);
	 run4.setText("SUMMARY");
     run4.setFontSize(14);
    // Creating Table  
	XWPFTable tab = d.createTable();
    tab.setTableAlignment(TableRowAlign.CENTER);
	XWPFTableRow row = tab.getRow(0); // First row
	XWPFTableRow row1 = tab.createRow(); // Second row
	XWPFTableRow row2 = tab.createRow(); // Second row
           
    // Columns  
	
	cCount= reportTable.getColumnCount();
	XWPFTableCell c;
	row.getCell(0).setText("Number of Students");
	c = row.addNewTableCell();
	row.getCell(1).setText(Integer.toString(nStudent));
	
	row1.getCell(0).setText("Number of Passes");
	row1.addNewTableCell();
	row1.getCell(1).setText(Integer.toString(nPass));
	
	row2.getCell(0).setText("Number of Failure");
	row2.addNewTableCell();
	row2.getCell(1).setText(Integer.toString(nFail));
                  
        tab.setWidth("100%");
    }
private void word4(String header1, String header2, String header3, String header4,String header5, int cCount, int rCount){
        
         XWPFParagraph paragraph1= d.createParagraph();
         XWPFParagraph paragraph2= d.createParagraph();
         XWPFParagraph paragraph3= d.createParagraph();
         XWPFParagraph paragraph4= d.createParagraph();
		 XWPFParagraph paragraph5= d.createParagraph();
         
    paragraph1.setAlignment(ParagraphAlignment.CENTER);
    paragraph2.setAlignment(ParagraphAlignment.CENTER);
    paragraph3.setAlignment(ParagraphAlignment.CENTER);
    paragraph4.setAlignment(ParagraphAlignment.CENTER);
	paragraph5.setAlignment(ParagraphAlignment.LEFT);
    
    XWPFRun run= paragraph1.createRun();
    XWPFRun run1= paragraph2.createRun();
    XWPFRun run2= paragraph3.createRun();
    XWPFRun run3= paragraph4.createRun();
    XWPFRun run4= paragraph5.createRun();
    XWPFRun run5= paragraph1.createRun();
    XWPFRun run6= paragraph1.createRun();
    XWPFRun run7= paragraph1.createRun();
    
    run.setText(header1);
    run.setFontSize(18);
    run1.setText(header2);
    run1.setFontSize(16);
    run2.setText(header3);
    run2.setFontSize(14);
    run3.setText(header4);
     run3.setFontSize(12);
	 run4.setText(header5);
     run4.setFontSize(12);
    // Creating Table  
	XWPFTable tab = d.createTable();
    tab.setTableAlignment(TableRowAlign.CENTER);
	XWPFTableRow row = tab.getRow(0); // First row
                 
    // Columns  
	cCount= reportTable.getColumnCount();
	row.getCell(0).setText("S/N");
                  //row.getCell(1).setText(resultTable.getColumnName(0));
				  XWPFTableCell [] c = new XWPFTableCell[cCount];
				  try{
					  for(int i=0; i<cCount; i++){
                  c[i] = row.addNewTableCell();
                  c[i].setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
                  c[i].setText(reportTable.getColumnName(i));
              }
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
                  rCount=reportTable.getRowCount();
               XWPFTableRow[] rows =new XWPFTableRow[rCount];
              for(int i=0;i<rows.length;i++){
                rows[i]=tab.createRow();
                rows[i].getCell(0).setText(Integer.toString(i+1));
                for(int j=0; j<c.length ;j++){
					rows[i].getCell(j+1).setText(getCellValuee(i,j).toString());
                }
              }
        tab.setWidth("100%");
    }
private void word5(String header1, String header2, String header3, String header4,String header5, int cCount, int rCount){
        
         XWPFParagraph paragraph1= d.createParagraph();
         XWPFParagraph paragraph2= d.createParagraph();
         XWPFParagraph paragraph3= d.createParagraph();
         XWPFParagraph paragraph4= d.createParagraph();
		 XWPFParagraph paragraph5= d.createParagraph();
         
    paragraph1.setAlignment(ParagraphAlignment.CENTER);
    paragraph2.setAlignment(ParagraphAlignment.CENTER);
    paragraph3.setAlignment(ParagraphAlignment.CENTER);
    paragraph4.setAlignment(ParagraphAlignment.CENTER);
	paragraph5.setAlignment(ParagraphAlignment.LEFT);
    
    XWPFRun run= paragraph1.createRun();
    XWPFRun run1= paragraph2.createRun();
    XWPFRun run2= paragraph3.createRun();
    XWPFRun run3= paragraph4.createRun();
    XWPFRun run4= paragraph5.createRun();
    XWPFRun run5= paragraph1.createRun();
    XWPFRun run6= paragraph1.createRun();
    XWPFRun run7= paragraph1.createRun();
    
    run.setText(header1);
    run.setFontSize(18);
    run1.setText(header2);
    run1.setFontSize(16);
    run2.setText(header3);
    run2.setFontSize(14);
    run3.setText(header4);
     run3.setFontSize(12);
	 run4.setText(header5);
     run4.setFontSize(12);
    // Creating Table  
	XWPFTable tab = d.createTable();
    tab.setTableAlignment(TableRowAlign.CENTER);
	XWPFTableRow row = tab.getRow(0); // First row
                 
    // Columns  
	cCount= reportTable.getColumnCount();
	row.getCell(0).setText("S/N");
                  //row.getCell(1).setText(resultTable.getColumnName(0));
				  XWPFTableCell [] c = new XWPFTableCell[cCount];
				  try{
					  for(int i=0; i<cCount; i++){
                  c[i] = row.addNewTableCell();
                  c[i].setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);
                  c[i].setText(reportTable.getColumnName(i));
              }
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
                  rCount=reportTable.getRowCount();
               XWPFTableRow[] rows =new XWPFTableRow[rCount];
              for(int i=0;i<rows.length;i++){
                rows[i]=tab.createRow();
                rows[i].getCell(0).setText(Integer.toString(i+1));
                for(int j=0; j<c.length ;j++){
					rows[i].getCell(j+1).setText(getCellValuee(i,j).toString());
                }
              }
        tab.setWidth("100%");
    }
	
public Object getCellValue(int i, int j){
     Object result = resultTable.getModel().getValueAt(i, j);
    String val;
        
        if( result == null) {
        val="";
    } else {
       val = result.toString();
    }
       
       
       return val;
}   
public Object getCellValuee(int i, int j){
     Object result = reportTable.getModel().getValueAt(i, j);
    String val;
        
        if( result == null) {
        val="";
    } else {
       val = result.toString();
    }
       
       
       return val;
}   
  
public void lecturers(){
	txtNewCourseLecturer.removeAll();
	txtNewCourseLecturer.removeAllItems();
        try{
            String sql = "SELECT * FROM users";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
           while(rs.next()){
			   txtNewCourseLecturer.addItem(rs.getString("NAME"));
		   }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }
public   void fillData(File file)  { 
         int index=-1;
         HSSFWorkbook workbook = null; 
        try { 
               try { 
                       FileInputStream inputStream = new FileInputStream (file);
                        workbook = new HSSFWorkbook(inputStream);
                    } 
               catch (IOException ex) 
                    { 
                         Logger.getLogger(MainCal.class. getName()).log(Level.SEVERE, null, ex);
                     } 

                       String[] strs=new String[workbook.getNumberOfSheets()];
                      //get all sheet names from selected workbook
                        for (int i = 0; i < strs.length; i++) {
                             strs[i]= workbook.getSheetName(i); }
                        JFrame frame = new JFrame("Input Dialog");
                      
                        String selectedsheet = (String) JOptionPane.showInputDialog(
                           frame, "Which worksheet you want to import ?", "Select Worksheet",
                          JOptionPane.QUESTION_MESSAGE, null, strs, strs[0]);
                
                       if (selectedsheet!=null) {
                            for (int i = 0; i < strs.length; i++)
                              {
                                 if (workbook.getSheetName(i).equalsIgnoreCase(selectedsheet))
                                 index=i; }
                            HSSFSheet sheet = workbook.getSheetAt(index);
                            HSSFRow row=sheet.getRow(0);
                        
                           headers.clear();
                           for (int i = 0; i < row.getLastCellNum(); i++)
                          {
                             HSSFCell cell1 = row.getCell(i);
                             headers.add(cell1.toString());
                          }
                        
                          vectordata.clear();
                          for (int j = 1; j < sheet.getLastRowNum() + 1; j++)
                          {
                             Vector d = new Vector();
                             row=sheet.getRow(j);
                             int noofrows=row.getLastCellNum();
                             for (int i = 0; i < noofrows; i++)
                             {    //To handle empty excel cells 
                                   HSSFCell cell;
                                 cell = row.getCell(i, org.apache.poi.ss.usermodel.Row.MissingCellPolicy.CREATE_NULL_AS_BLANK );
                                  
                                   d.add(cell.toString());
                             }
                            d.add("\n");
                            vectordata.add(d);
                          }
                     }
                    else { return; }
        }
      catch (Exception e) { e.printStackTrace(); } }
public  final void clear(){


                scoreCourse.setSelectedItem(null);
                cred=(null);
               //sessionCombo.setSelectedItem(null);

    }

public void Update_Table(String courss, String sesss){
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        
        // viewing all record in the scores table
        if(courss.equalsIgnoreCase("All")&& sesss.equalsIgnoreCase("All")){
            try{
        String sql= "select * from scores "; 
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();        
        resultTable.setModel(DbUtils.resultSetToTableModel(rs));
        
                rs.close();
                pst.close();
        
        }catch(SQLException e){
        JOptionPane.showMessageDialog(null, "error Updating Table");
        }
        }
        
        // viewing only all scores from all courses in the same session
        else if(courss.equalsIgnoreCase("All")){
            try{
        String sql= "select * from scores where semester=?"; 
        pst=conn.prepareStatement(sql);
        pst.setString(1, sesss);
        rs=pst.executeQuery();        
        resultTable.setModel(DbUtils.resultSetToTableModel(rs));
        
                rs.close();
                pst.close();
        
        }catch(SQLException e){
        JOptionPane.showMessageDialog(null, "eerror Updating Table");
        }
            
        }else if(sesss.equalsIgnoreCase("All")){
            try{
        String sql= "select * from scores where course=? "; 
        pst=conn.prepareStatement(sql);
        pst.setString(1, courss);
        rs=pst.executeQuery();        
        resultTable.setModel(DbUtils.resultSetToTableModel(rs));
        
                rs.close();
                pst.close();
        
        }catch(SQLException e){
        JOptionPane.showMessageDialog(null, "error Updating Table");
        }
        }
        else{
            try{
        String sql= "select * from scores where course=? and semester=?"; 
        pst=conn.prepareStatement(sql);
        pst.setString(1, courss);
        pst.setString(2, sesss);
        rs=pst.executeQuery();        
        resultTable.setModel(DbUtils.resultSetToTableModel(rs));
        
                rs.close();
                pst.close();
        
        }catch(SQLException e){
        JOptionPane.showMessageDialog(null, "error Updating Table");
        }
        }
        
    }
  
public  void viewGp(){
      try{
            String sql="select * from gp";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            resultTable.setModel(DbUtils.resultSetToTableModel(rs));
            rs.close();
            pst.close();
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
}
     
private void l1(){
		
		String levell=null;
        int level = 0;
        String depts=null;
		school="";
		    levell = (String) reportLevelCombo.getSelectedItem();
            level = Integer.parseInt(levell);
            depts = dept;
			header2="SCHOOL OF "+ school;
			header3=depts + " DEPARTMENT";
			header4="level " +levell+"  "+depts+ " SENATE FORMAT EXAMINATION RESULTS";
			
			if(levell.equalsIgnoreCase("1")){
				try{
					header5="List of Level "+levell+" Courses";
					
                    String sql="select code as COURSE_CODE, title as COURSE_TITLE, "
							+ "credit as CREDIT_UNIT from courses where ( code like '%"+levell+"__')"
							+ " and department='"+depts+"' ";
                    pst=conn.prepareStatement(sql);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));
					pst.close();
                    rs.close();
                }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
			}else if(levell.equalsIgnoreCase("2")){
				
				try{
					header5="List of Level One Courses";
					
                    String sql="select code as COURSE_CODE, title as COURSE_TITLE, "
							+ "credit as CREDIT_UNIT from courses where ( code like '%1__')"
							+ " and department='"+depts+"' ";
                    pst=conn.prepareStatement(sql);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));
					pst.close();
                    rs.close();
                }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
			
				try{
					header5="List of Level Two Courses";
					
                    String sql="select code as COURSE_CODE, title as COURSE_TITLE, "
							+ "credit as CREDIT_UNIT from courses where ( code like '%2__')"
							+ " and department='"+depts+"' ";
                    pst=conn.prepareStatement(sql);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));
					pst.close();
                    rs.close();
                }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
			}
			else if(levell.equalsIgnoreCase("3")){
				
				try{
					header5="List of Level One Courses";
					
                    String sql="select code as COURSE_CODE, title as COURSE_TITLE, "
							+ "credit as CREDIT_UNIT from courses where ( code like '%1__')"
							+ " and department='"+depts+"' ";
                    pst=conn.prepareStatement(sql);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));
					pst.close();
                    rs.close();
                }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
			
				try{
					header5="List of Level Two Courses";
					
                    String sql="select code as COURSE_CODE, title as COURSE_TITLE, "
							+ "credit as CREDIT_UNIT from courses where ( code like '%2__')"
							+ " and department='"+depts+"' ";
                    pst=conn.prepareStatement(sql);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));
					pst.close();
                    rs.close();
                }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
				try{
					header5="List of Level Three Courses";
					
                    String sql="select code as COURSE_CODE, title as COURSE_TITLE, "
							+ "credit as CREDIT_UNIT from courses where ( code like '%3__')"
							+ " and department='"+depts+"' ";
                    pst=conn.prepareStatement(sql);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));
					pst.close();
                    rs.close();
			}catch(Exception e){ JOptionPane.showMessageDialog(null, e);}
				
			}
}
private void l11(){
	String levell=null;
        int level = 0;
        String depts=null;
		school="";
		try{

            levell = (String) reportLevelCombo.getSelectedItem();
            level = Integer.parseInt(levell);
            depts = dept;
			header2="SCHOOL OF "+ school;
			header3=depts + " DEPARTMENT";
			header4="level " +levell+"  "+depts+ " SENATE FORMAT EXAMINATION RESULTS";

        }catch(Exception e){

            lblReportMsg.setText("No Department or Level Selected!");
        }
				try{
					header5="Level "+levell+" Students List:";
					
                    String se="SELECT TempTable.matriculation as MATRIC_NO, TempTable.name AS NAME, "
							+ "level1.gpa as GPA   FROM cgpa TempTable join level1"
							+ " on level1.matric= TempTable.matriculation   ";
					pst=conn.prepareStatement(se);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));
                    pst.close();
                    rs.close();
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
				cCount=reportTable.getColumnCount();
				rCount=reportTable.getRowCount();
				
				
				try{
					//word2();
				}catch(Exception e){
				 JOptionPane.showMessageDialog(null, e);	
				}
}
private void l111(){
	String levell=null;
        int level = 0;
        String depts=null;
		school="";
     try{

            levell = (String) reportLevelCombo.getSelectedItem();
            level = Integer.parseInt(levell);
            depts = dept;
			header2="SCHOOL OF "+ school;
			header3=depts + " DEPARTMENT";
			header4="level " +levell+"  "+depts+ " SENATE FORMAT EXAMINATION RESULTS";

        }catch(Exception e){

            lblReportMsg.setText("No Department or Level Selected!");
        }
	 try{
		 header5=" ";
					
                    String se="SELECT TempTable.matriculation, TempTable.name, TempTable.nss, level1.tcr , level1.tce , level1.tgp "
							+ ", level1.gpa as GPA   FROM cgpa TempTable join level1 on level1.matric= TempTable.matriculation   ";
					pst=conn.prepareStatement(se);
                    rs=pst.executeQuery();
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));
                    pst.close();
                    rs.close();

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
				cCount=reportTable.getColumnCount();
				rCount=reportTable.getRowCount();
				try{
					//word3();
				}catch(Exception e){
				 JOptionPane.showMessageDialog(null, e);	
				}
}

public void summary(){
	String p="Pass";
	String f="Fail";
	
	try{
		String sql="select count(*) from "+dept+"scores where remark='"+p+"' ";
		pst=conn.prepareStatement(sql);
		rs=pst.executeQuery();
		while(rs.next()){
			nPass=rs.getInt(1);
		}
	}catch(Exception e){}
	nP.setText(Integer.toString(nPass));
	try{
		String sql="select count(*) from "+dept+"scores where remark='"+f+"' ";
		pst=conn.prepareStatement(sql);
		rs=pst.executeQuery();
		while(rs.next()){
			nFail=rs.getInt(1);
		}
	}catch(Exception e){}
	try{
		String sql="select count(*) from "+dept+"students ";
		pst=conn.prepareStatement(sql);
		rs=pst.executeQuery();
		while(rs.next()){
			nStudent=rs.getInt(1);
		}
	}catch(Exception e){}
	nStud.setText(Integer.toString(nStudent));
	try{
		String sql="select count(*) from scores where  remark='"+null+"' ";
		pst=conn.prepareStatement(sql);
		rs=pst.executeQuery();
		while(rs.next()){
			nAbsent=rs.getInt(1);
		}
	}catch(Exception e){}
	nA.setText(Integer.toString(nAbsent));
	int nCos=0;
	try{
		String sql="select count(*) from "+dept+"courses ";
		pst=conn.prepareStatement(sql);
		rs=pst.executeQuery();
		while(rs.next()){
			nCos=rs.getInt(1);
		}
	}catch(Exception e){}
	nCourse.setText(Integer.toString(nCos));
	nLev.setText(lev+"00");
}

public void rSummary(){
	String level = (String) reportLevelCombo.getSelectedItem();
	String p="Pass";
	String f="Fail";
	String le=null;
	if(level.equals("1")){
		le="level1";
	}else if(level.equals("2")){
		le="level2";
	}else if(level.equals("3")){
		le="level3";
	}else if(level.equals("4")){
		le="level4";
	}
	
	try{
		String sql="select count(*) from "+dept+"summary where remark=? ";
		pst=conn.prepareStatement(sql);
		pst.setString(1, "Pass");
		rs=pst.executeQuery();
		while(rs.next()){
			nPass=rs.getInt(1);
		}
	}catch(Exception e){}
	try{
		String sql="select count(*) from '"+le+"' where "
				+ "session='"+session+"' and remark='"+f+"' ";
		pst=conn.prepareStatement(sql);
		rs=pst.executeQuery();
		while(rs.next()){
			nFail=rs.getInt(1);
		}
	}catch(Exception e){}
	try{
		String sql="select count(*) from '"+le+"' where  "
				+ "session='"+session+"' ";
		pst=conn.prepareStatement(sql);
		rs=pst.executeQuery();
		while(rs.next()){
			nStudent=rs.getInt(1);
		}
	}catch(Exception e){}
	try{
		String sql="select count(*) from '"+le+"' where  "
				+ "session='"+session+"' and remark='"+null+"' ";
		pst=conn.prepareStatement(sql);
		rs=pst.executeQuery();
		while(rs.next()){
			//nAbsent=rs.getInt(1);
		}
	}catch(Exception e){}
	
}

public void ct(){
	  if(chooser.showSaveDialog(this)==JFileChooser.APPROVE_OPTION){
// creating word document
try {
	
	
            
     d = new XWPFDocument();
    
     CTDocument1 document = d.getDocument();
     CTBody body = document.getBody();
	 if (!body.isSetSectPr()) {
     body.addNewSectPr();
	 }
	 CTSectPr section = body.getSectPr();
	 if(!section.isSetPgSz()) {
    section.addNewPgSz();
	 }
	 CTPageSz pageSize = section.getPgSz();
	 pageSize.setW(BigInteger.valueOf(15840));
	 pageSize.setH(BigInteger.valueOf(12240));
	 pageSize.setOrient(STPageOrientation.LANDSCAPE);
	 out = new FileOutputStream(new File(chooser.getSelectedFile().getAbsolutePath()+".docx"));
	l1();
	word1();
	l11();
	word2();
	l111();	
	word3();
	
	d.write(out);
	d.close();
	JOptionPane.showMessageDialog(null, "Saved...");
              }
              catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
              }

}
 	 
}
public void sessionChange(){
// 3 previous years
	DateTimeFormatter f11 = DateTimeFormatter.ofPattern("YYYY");
		DateTimeFormatter h11 = DateTimeFormatter.ofPattern("YY");
		LocalDate now11=LocalDate.now().minusYears(2);
		LocalDate date11=LocalDate.now().minusYears(3);		
		String bf11 = date11.format(f11);
		String aft11= now11.format(h11);	
// 2 previous years
	DateTimeFormatter f1 = DateTimeFormatter.ofPattern("YYYY");
		DateTimeFormatter h1 = DateTimeFormatter.ofPattern("YY");
		LocalDate now1=LocalDate.now().minusYears(1);
		LocalDate date1=LocalDate.now().minusYears(2);		
		String bf1 = date1.format(f1);
		String aft1= now1.format(h1);
		//previous session
		DateTimeFormatter f = DateTimeFormatter.ofPattern("YYYY");
		DateTimeFormatter h = DateTimeFormatter.ofPattern("YY");
		LocalDate now=LocalDate.now();
		LocalDate date=LocalDate.now().minusYears(1);		
		String bf = date.format(f);
		String nw= now.format(h);
		//next session
		DateTimeFormatter ff = DateTimeFormatter.ofPattern("YY");
		DateTimeFormatter hh = DateTimeFormatter.ofPattern("YYYY");
		LocalDate noww=LocalDate.now();
		LocalDate later=LocalDate.now().plusYears(1);		
		String la = later.format(ff);
		String nww= noww.format(hh);
		
		String prevvv = bf11+"/"+aft11;
		String prevv = bf1+"/"+aft1;
		String prev = bf+"/"+nw;
		String next = nww+"/"+la;
		
		int l=0;
		if(session.equalsIgnoreCase(next)){
			l=0;
		}else if(session.equalsIgnoreCase(prev)){
			l=1;
		}else if(session.equalsIgnoreCase(prevv)){
			l=2;
		}else if(session.equalsIgnoreCase(prevvv)){
			l=3;
		}
		
		JFrame frame = new JFrame("Input Dialog");      
		String[] lists ={next, prev, prevv, prevvv };		
		session = (String) JOptionPane.showInputDialog(
			 frame, "Change Session?", "Session",
			 JOptionPane.QUESTION_MESSAGE, null, lists, lists[l]);
		    
	}
public void sessionSelect(){
// 3 previous years
	DateTimeFormatter f11 = DateTimeFormatter.ofPattern("YYYY");
		DateTimeFormatter h11 = DateTimeFormatter.ofPattern("YY");
		LocalDate now11=LocalDate.now().minusYears(2);
		LocalDate date11=LocalDate.now().minusYears(3);		
		String bf11 = date11.format(f11);
		String aft11= now11.format(h11);	
// 2 previous years
	DateTimeFormatter f1 = DateTimeFormatter.ofPattern("YYYY");
		DateTimeFormatter h1 = DateTimeFormatter.ofPattern("YY");
		LocalDate now1=LocalDate.now().minusYears(1);
		LocalDate date1=LocalDate.now().minusYears(2);		
		String bf1 = date1.format(f1);
		String aft1= now1.format(h1);
		//previous session
		DateTimeFormatter f = DateTimeFormatter.ofPattern("YYYY");
		DateTimeFormatter h = DateTimeFormatter.ofPattern("YY");
		LocalDate now=LocalDate.now();
		LocalDate date=LocalDate.now().minusYears(1);		
		String bf = date.format(f);
		String nw= now.format(h);
		//next session
		DateTimeFormatter ff = DateTimeFormatter.ofPattern("YY");
		DateTimeFormatter hh = DateTimeFormatter.ofPattern("YYYY");
		LocalDate noww=LocalDate.now();
		LocalDate later=LocalDate.now().plusYears(1);		
		String la = later.format(ff);
		String nww= noww.format(hh);
		
		String prevvv = bf11+"/"+aft11;
		String prevv = bf1+"/"+aft1;
		String prev = bf+"/"+nw;
		String next = nww+"/"+la;
		
		
		JFrame frame = new JFrame("Input Dialog");      
		String[] lists ={next, prev, prevv, prevvv };		
		for(int i=0; i<lists.length; i++){
			//viewSessionCombo.addItem(lists[i]);
		}
		    
		System.out.print(session);
	}
public void sessionNow(){
	nbf.setMinimumFractionDigits(2);
nbf.setMaximumFractionDigits(2);
	DateTimeFormatter ff = DateTimeFormatter.ofPattern("YY");
		DateTimeFormatter hh = DateTimeFormatter.ofPattern("YYYY");
		LocalDate noww=LocalDate.now();
		LocalDate later=LocalDate.now().plusYears(1);		
		String la = later.format(ff);
		String nww= noww.format(hh);
		session = nww+"/"+la;
}
public void fillCourse(){
	scoreCourse.removeAllItems();
	try{
			 String sql="select* from courses where course_lecturer='"+lecturer+"' and semester=? ";
			 pst=conn.prepareStatement(sql);
			 pst.setString(1, semester);
			rs=pst.executeQuery();
			while(rs.next()){
				scoreCourse.addItem(rs.getString("CODE"));
			}
			rs.close();
			pst.close();
		}catch(Exception e){
			JOptionPane.showMessageDialog(null, e);
		}
}
public void countDown(){
	String levell=null;
     int level = 0;
		levell = (String) reportLevelCombo.getSelectedItem();
		level = Integer.parseInt(levell);
	
		CountDownClock clock = new CountDownClock();
		clock.start();
		
		
	}
interface TimeMonitor {
	int getTime();
}
	
public class CountDownClock extends Thread implements TimeMonitor{
		private int t; 
		public CountDownClock() {
			this.t = 0;
			}
		
		public void run()
		{
			
			for (; t <= 99; t++) {
				
				lblReportMsg.setText("Generating...  "+ t);
				progress1.setValue(t);
				try{
					Thread.sleep(50);
				}
				catch (InterruptedException e){}
				try {
			if(t==1){
				out = new FileOutputStream(new File(chooser.getSelectedFile().getAbsolutePath()+".docx"));
			}
			try{
					if(t==10){
					l1();
					}else if(t==15){
					word1();
					}else if(t==20){
					l11();	
					}else if(t==25){
					word2();
					}else if(t==30){
					l111();	
					}else if(t==35){
					word3();	
					}else if(t==50){
					rSummary();
					}else if(t==60){
					rSumWord();	
					}else if (t==80){
						d.write(out);
						d.close();
					JOptionPane.showMessageDialog(null, "Saved...");
					}
					
				}
				catch (Exception e){}
		} catch (FileNotFoundException ex) {
			Logger.getLogger(MainCal.class.getName()).log(Level.SEVERE, null, ex);
		}
				}
				
			}

		@Override
		public int getTime() {
			throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
		}
				
		}

}

	


